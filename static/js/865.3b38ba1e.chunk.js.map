{"version":3,"file":"static/js/865.3b38ba1e.chunk.js","mappings":"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","sources":["components/MotifBySize.tsx","components/StitchPattern.tsx","projects/tiara-vest/stitches.tsx","utils/patternCombination.ts"],"sourcesContent":["import { Select, VStack, Text, Flex, Alert, AlertIcon } from \"@chakra-ui/react\";\nimport { Direction, MotifComponent, MotifInPattern } from \"@tanyoknits/shared\";\nimport { useState } from \"react\";\nimport { useProject } from \"../layout/Project\";\n\ninterface Props {\n  motifBySize: { size: string; motif: MotifInPattern; direction?: Direction }[];\n}\n\nexport default function MotifBySize({ motifBySize }: Props) {\n  const [selectedSize, setSelectedSize] = useState<number>(0);\n  const { motif, direction } = motifBySize[selectedSize];\n  const { colorTheme } = useProject();\n\n  return (\n    <VStack spacing={8} align=\"left\">\n      <Flex gap={4} wrap=\"wrap\" align=\"center\">\n        {motifBySize.length > 1 && (\n          <>\n            <Text variant=\"bold\">Select size</Text>\n            <Select\n              onChange={(e) => setSelectedSize(+e.target.value)}\n              width=\"fit-content\"\n              defaultValue={selectedSize}\n              mr={[0, 8]}\n            >\n              {motifBySize.map((motif, i) => (\n                <option key={i} value={i}>\n                  {motif.size}\n                </option>\n              ))}\n            </Select>\n          </>\n        )}\n        <Alert status=\"info\" width=\"fit-content\" colorScheme={colorTheme}>\n          <AlertIcon />\n          Chart is interactive - click a stitch to see the corresponding written\n          instruction.\n        </Alert>\n      </Flex>\n      <MotifComponent\n        {...motif}\n        direction={direction}\n        colorScheme={colorTheme}\n      />\n    </VStack>\n  );\n}\n","import { VStack, Text } from \"@chakra-ui/react\";\nimport MotifBySize from \"./MotifBySize\";\nimport { Stitch, StitchList } from \"@tanyoknits/shared\";\nimport { MotifBySizeItem } from \"../utils/types\";\n\ninterface Props {\n  intro: string;\n  motifBySize: MotifBySizeItem[];\n  stitches: Stitch[];\n}\nexport default function StitchPattern({ intro, motifBySize, stitches }: Props) {\n  return (\n    <VStack spacing={8} align=\"left\">\n      <Text>{intro}</Text>\n      <MotifBySize\n        motifBySize={motifBySize.map((m) => {\n          const { motif, sizes } = m;\n          return {\n            size: sizes.join(\", \"),\n            motif: { ...motif, title: undefined },\n          };\n        })}\n      />\n      <StitchList stitches={stitches} />\n    </VStack>\n  );\n}\n","import {\n  Abbr,\n  ChartComponent,\n  Techniques,\n  definition,\n  getMossMotif,\n  techniques,\n} from \"@tanyoknits/shared\";\nimport {\n  getBasicBraidMotif,\n  getZigZagMotif,\n  getCenterDiamondMotif,\n} from \"@tanyoknits/shared\";\nimport { MotifBySizeItem, PageInfo } from \"../../utils/types\";\nimport { sizes } from \"./pattern\";\nimport StitchPattern from \"../../components/StitchPattern\";\nimport { getMotifCombination } from \"../../utils/patternCombination\";\n\n// Stitches in charts\nconst { k, p, c6l, c6r, mb, c21lp, c21rp, m1l } = definition;\n\n// Charts\nconst braidMotif = getBasicBraidMotif(9, 8);\nexport const braid: MotifBySizeItem[] = [\n  {\n    sizes: sizes,\n    motif: braidMotif,\n  },\n];\n\nconst zigzagS = getZigZagMotif(3, 1, 6);\nconst zigzagM = getZigZagMotif(3, 2, 6);\nexport const zigzag: MotifBySizeItem[] = [\n  {\n    sizes: sizes.slice(0, 1),\n    motif: zigzagS,\n  },\n  {\n    sizes: sizes.slice(1, 2),\n    motif: zigzagM,\n  },\n];\n\nconst diamondMotif = getCenterDiamondMotif();\nexport const diamond: MotifBySizeItem[] = [\n  {\n    sizes: sizes,\n    motif: diamondMotif,\n  },\n];\n\nconst mossMotif = getMossMotif(2);\nexport const moss: MotifBySizeItem[] = [{ sizes: sizes, motif: mossMotif }];\n\nexport const combination: MotifBySizeItem[] = [\n  {\n    sizes: sizes,\n    motif: getMotifCombination(\n      [braidMotif, zigzagS, diamondMotif],\n      [k, k],\n      [\n        [p, p],\n        [p, p],\n      ],\n      [\"blue\", \"pink\", \"green\"],\n      true\n    ),\n  },\n];\n\nconst usedTechniques: {\n  title: string;\n  desc: string;\n  video: string | undefined;\n}[] = [\n  {\n    title: \"Cable CO\",\n    desc: \"Used for CO of each shoulder\",\n    video: undefined,\n  },\n  {\n    title: \"m1l & m1r\",\n    desc: \"Make 1 left/right, used for arm inset increase\",\n    video: m1l.videos?.[0].url,\n  },\n  {\n    title: \"w&t\",\n    desc: \"Wrap & turn; short row technique, my preference is German short row. \",\n    video: techniques[\"Wrap & Turn\"]?.videos?.[0].url,\n  },\n  {\n    title: \"Sewn on BO\",\n    desc: \"Or tubular BO\",\n    video: techniques[\"Tubular BO\"]?.videos[0].url,\n  },\n];\n\nconst REFLECT_TEXT =\n  \"Reflected version of this motif is also used to make a symmetrical pattern on front and back.\";\n\nconst stitchPage: PageInfo[] = [\n  {\n    id: \"braid-chart\",\n    label: \"Braid\",\n    component: (\n      <StitchPattern\n        intro={REFLECT_TEXT}\n        motifBySize={braid}\n        stitches={[k, p, c6l, c6r]}\n      />\n    ),\n  },\n  {\n    id: \"zigzag-chart\",\n    label: \"Zigzag\",\n    component: (\n      <StitchPattern\n        intro={REFLECT_TEXT}\n        motifBySize={zigzag}\n        stitches={[k, p]}\n      />\n    ),\n  },\n  {\n    id: \"diamond-chart\",\n    label: \"Diamond\",\n    component: (\n      <StitchPattern\n        intro=\"Same motif but without bobbles are used in the back.\"\n        motifBySize={diamond}\n        stitches={[k, p, c21lp, c21rp, mb]}\n      />\n    ),\n  },\n  {\n    id: \"moss-chart\",\n    label: \"Moss\",\n    component: (\n      <StitchPattern\n        intro=\"This motif is used on the side as front and back connects to the whole body.\"\n        motifBySize={moss}\n        stitches={[k, p]}\n      />\n    ),\n  },\n  {\n    id: \"pattern-combination\",\n    label: \"Combination\",\n    component: <ChartComponent chart={combination[0].motif.chart} size=\"M\" />,\n  },\n  {\n    id: \"techniques\",\n    label: \"Techniques\",\n    component: <Techniques list={usedTechniques} />,\n  },\n  {\n    id: \"abbr\",\n    label: \"Abbreviations\",\n    component: <Abbr list={[\"CO\", \"BO\"]} />,\n  },\n];\n\nexport default stitchPage;\n","import {\n  Motif,\n  MotifColor,\n  Stitch,\n  StsGroup,\n  getRightLeftFlippedChart,\n} from \"@tanyoknits/shared\";\n\nexport function getMotifCombination(\n  motifs: Motif[],\n  edge: Stitch[],\n  gutters: Stitch[][],\n  motifColors: MotifColor[],\n  hasCenter?: boolean\n): Motif {\n  const repCount = motifs.length - (hasCenter ? 1 : 0);\n  const allGutters = [...gutters, ...gutters.slice(0, repCount).reverse()];\n  const allColors = [\n    ...motifColors,\n    ...motifColors.slice(0, repCount).reverse(),\n  ];\n  const allMotifs = [...motifs, ...motifs.slice(0, repCount).reverse()];\n  const Charts1 = motifs.map((m) => m.chart);\n  const Charts2 = motifs\n    .slice(0, repCount)\n    .reverse()\n    .map((m) => getRightLeftFlippedChart(m.chart));\n  const allCharts = [...Charts1, ...Charts2];\n\n  const maxRows = Math.max(...motifs.map((m) => m.chart.length));\n\n  const chart = Array.from({ length: maxRows }).map((_, i) => {\n    return allCharts.flatMap((m, j) => {\n      const stsGroups: StsGroup[] = [];\n      if (j === 0) {\n        stsGroups.push({ sts: edge });\n      }\n      const motifRowID = i % m.length;\n      stsGroups.push({\n        sts: m[motifRowID].map((sg) => sg.sts).flat(),\n        motif: { id: allColors[j], isFirstRow: motifRowID === 0 },\n      });\n      if (j === allCharts.length - 1) {\n        stsGroups.push({ sts: edge });\n      } else {\n        stsGroups.push({ sts: allGutters[j] });\n      }\n      return stsGroups;\n    });\n  });\n\n  const accStsCount =\n    allGutters.reduce((agg, cur) => agg + cur.length, 0) + edge.length * 2;\n\n  return {\n    chart,\n    stsCount:\n      allMotifs.reduce((agg, cur) => agg + cur.stsCount, 0) + accStsCount, // doesn't really matter here\n    stEquivCount:\n      allMotifs.reduce(\n        (agg, cur) => agg + (cur.stEquivCount ?? cur.stsCount),\n        0\n      ) + accStsCount,\n  };\n}\n"],"names":["MotifBySize","motifBySize","useState","selectedSize","setSelectedSize","motif","direction","colorTheme","useProject","spacing","align","gap","wrap","length","variant","onChange","e","target","value","width","defaultValue","mr","map","i","size","status","colorScheme","StitchPattern","intro","stitches","m","sizes","join","title","undefined","k","definition","p","c6l","c6r","mb","c21lp","c21rp","m1l","braidMotif","getBasicBraidMotif","braid","zigzagS","getZigZagMotif","zigzagM","zigzag","diamondMotif","getCenterDiamondMotif","diamond","mossMotif","getMossMotif","moss","combination","motifs","edge","gutters","motifColors","hasCenter","repCount","allGutters","slice","reverse","allColors","allMotifs","Charts1","chart","Charts2","getRightLeftFlippedChart","allCharts","maxRows","Math","max","Array","from","_","flatMap","j","stsGroups","push","sts","motifRowID","sg","flat","id","isFirstRow","accStsCount","reduce","agg","cur","stsCount","stEquivCount","getMotifCombination","usedTechniques","desc","video","videos","url","techniques","REFLECT_TEXT","label","component","list"],"sourceRoot":""}