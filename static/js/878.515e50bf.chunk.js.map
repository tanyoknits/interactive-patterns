{"version":3,"file":"static/js/878.515e50bf.chunk.js","mappings":"sOAIe,SAASA,EAAeC,GAGjB,IAFpBC,EAAMD,EAANC,OACAC,EAAWF,EAAXE,YAEMC,EAASF,EAAOG,MAAMC,KAAOJ,EAAOK,SACpCC,GAAUC,EAAAA,EAAAA,GAAaP,EAAOG,MAAMC,KAAO,EAAGF,EAAS,EAAG,CAC9DM,WAAW,EACXC,IAAK,YACLC,MAAO,EACPC,eAAe,IAEXC,EAAa,EAA2B,EAAvBZ,EAAOa,OAAOC,OAAoC,EAAvBd,EAAOa,OAAOE,OAEhE,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAkB,CACjBC,MAAM,uBACNC,QAAO,OAAAC,OAASX,EAAa,EAAC,SAC9BY,KAAM,CACJ,CACEC,KAAK,gFAADF,OAAkFvB,EAAO0B,SAAQ,8FAAAH,OACjDvB,EAAO0B,SAAQ,gBACnEC,MAAM,SAADJ,OAAWvB,EAAOG,MAAMC,KAAI,UAGrCwB,UAAW,CACT,sCAAsC,+BAADL,QACNM,EAAAA,EAAAA,IAC7B5B,EAAY6B,IAAM,KACnB,yCAGLX,EAAAA,EAAAA,KAACC,EAAAA,GAAkB,CACjBC,MAAM,gBACNC,QAAQ,WACRE,KAAM,CACJ,CACEC,KAAK,IAADF,OAAMjB,EAAQG,IAAIsB,KAAK,MAAK,aAChCJ,MAAM,GAADJ,OAAKvB,EAAOK,SAAQ,sBAAAkB,OAAqBrB,EAAM,SAEtD,CAAEuB,KAAM,yCAGZN,EAAAA,EAAAA,KAACC,EAAAA,GAAkB,CACjBC,MAAM,cACNC,QAAQ,WACRE,KAAM,CACJ,CAAEC,KAAK,6BAADF,OAA+BrB,EAAS,EAAC,YAC/C,CAAEuB,KAAM,aAEVE,MAAK,uBAAAJ,QAAyBM,EAAAA,EAAAA,IAC5B5B,EAAY6B,KACb,4CAIT,C,oEClCO,SAASvB,EACdyB,EACA9B,EACA+B,GAEA,IAAIC,GAAoB,EACpBC,GAAsB,EAGpBC,EACa,IAAjBH,EAAOvB,OACH2B,EAAAA,EAAAA,IAAeL,EAAU9B,IACzBoC,EAAAA,EAAAA,IAAiBN,EAAU9B,GACzBM,EAAyCyB,EAAzCzB,UAAWC,EAA8BwB,EAA9BxB,IAAKC,EAAyBuB,EAAzBvB,MAAOC,EAAkBsB,EAAlBtB,cAGzB4B,EAAUC,KAAKC,OAAOL,EAAU,GAAK1B,GAAS,GACpC,IAAZ6B,IACFL,GAAoB,GAElB1B,IACF4B,EAAU,IAAMG,GAIlB,IAAMG,EAAgBN,EAAUO,KAAI,SAACC,EAAUC,GAC7C,IAAMC,EAAWrC,EAAIsC,MAAM,KAC3B,OAAiB,IAAVrC,GACLmC,IAAMT,EAAUY,OAAS,IACxB9C,EAAS8B,GAAY,IAAM,EAAE,IAAAT,OACxBqB,EAAW,EAAC,MAAArB,OAAKuB,EAAS,IAAE,IAAAvB,OAC5BqB,EAAWlC,EAAK,MAAAa,OAElBsB,EAAIT,EAAUY,OAAS,EAAIF,EAAS,GAAKA,EAAS,GAE1D,IACItC,GAAa+B,EAAU,GACzBG,EAAcO,KAAK,IAAD1B,OAAKgB,IAIzB,IAAMW,GAA0BC,EAAAA,EAAAA,IAAkBT,GAI9CU,EAAiB,EAEfC,EAASH,EAAcI,QAAO,SAACC,EAAkB9C,EAAK+C,GAE1D,GAAIA,EAAMJ,EACR,OAAOG,EAwBT,IAAME,EApBN,SAASC,EAAahD,GAEpB,IADA,IAAM+C,EAAU,CAACP,EAAcS,MAAMH,EAAKA,EAAM9C,IACvCmC,EAAIW,EAAM9C,EAAOmC,GAAKK,EAAcF,OAAStC,GAGlDkD,KAAKC,UAAUJ,EAAQ,MACvBG,KAAKC,UAAUX,EAAcS,MAAMd,EAAGA,EAAInC,IAJemC,GAAKnC,EAM9D+C,EAAQR,KAAKQ,EAAQ,IACrBtB,GAAsB,EAK1B,OAAIsB,EAAQT,OAAS,GAAKtC,EAAQwC,EAAcF,OAAS,EAChDS,EAEFC,EAAahD,EAAQ,EAC9B,CAEgBgD,CAAa,GAE7B,GAAID,EAAQT,OAAS,EAAG,CACtB,IAAMc,EAAeL,EAAQ,GAC7BF,EAAON,KAAK,IAAD1B,OAAKuC,EAAa/B,KAAK,MAAK,QAAAR,OAAOkC,EAAQT,SAEtDI,GAAkBK,EAAQM,OAAOf,MACnC,MACEO,EAAON,KAAKxC,GAEZ2C,IAEF,OAAOG,CACT,GAAG,IAEH,MAAO,CACL9C,IAAKE,EAAgB0C,EAASH,EAC9BhB,kBAAAA,EACAC,oBAAAA,EAEJ,C","sources":["projects/pine-pullover/BodyInstruction.tsx","../../truly-even/src/utils.ts"],"sourcesContent":["import { getTrulyEven } from \"@tanyoknits/truly-even\";\nimport { InstructionProps } from \"./Instruction\";\nimport { SectionInstruction, getInchAndCm } from \"@tanyoknits/shared\";\n\nexport default function BodyInstruction({\n  schema,\n  measurement,\n}: InstructionProps) {\n  const endSts = schema.total.body - schema.waistDec;\n  const decText = getTrulyEven(schema.total.body / 2, endSts / 2, {\n    avoidEnds: true,\n    sts: \"ssk-k2tog\",\n    count: 2,\n    hasDoubleNest: true,\n  });\n  const startRowID = 2 + schema.raglan.every2 * 2 + schema.raglan.every4 * 4;\n\n  return (\n    <>\n      <SectionInstruction\n        title=\"Body & sleeves split\"\n        rowType={`Rnd ${startRowID + 1} + CO`}\n        rows={[\n          {\n            text: `k till mA, rm mA, slip sts to scrap yarn or stitch holder till mB, rm mB, CO ${schema.underarm}, k incl chart B till mC, \n          slip sts in scrap yarn or stitch holder till mD, CO ${schema.underarm}, k till BOR`,\n            notes: `total ${schema.total.body} sts`,\n          },\n        ]}\n        afterList={[\n          \"In the next rnd, k all incl chart B\",\n          `Rep the last row till appx. ${getInchAndCm(\n            measurement.hem + 0.25\n          )} shorter than the desired length.`,\n        ]}\n      />\n      <SectionInstruction\n        title=\"Waistline dec\"\n        rowType=\"Next rnd\"\n        rows={[\n          {\n            text: `{${decText.sts.join(\", \")}}, rep{-}`,\n            notes: `${schema.waistDec} sts dec'd, total ${endSts} sts`,\n          },\n          { text: \"change to a smaller needle, k all\" },\n        ]}\n      />\n      <SectionInstruction\n        title=\"Hem ribbing\"\n        rowType=\"Next rnd\"\n        rows={[\n          { text: `(k1, p1), rep (-) to end (${endSts / 2} times)` },\n          { text: \"as rnd 1\" },\n        ]}\n        notes={`Work in ribbing for ${getInchAndCm(\n          measurement.hem\n        )}. BO with Sewn-on BO is recommended.`}\n      />\n    </>\n  );\n}\n","import {\n  getDec2StsList,\n  getChangeStsList,\n  getStsListRepeats,\n} from \"@tanyoknits/shared\";\n\nexport type IncStsType = \"m1-m1\" | \"m1r-m1l\" | \"m1l-m1r\";\nexport type DecStsType =\n  | \"k2tog-k2tog\"\n  | \"ssk-ssk\"\n  | \"k2tog-ssk\"\n  | \"ssk-k2tog\"\n  | \"cdd-cdd-k2tog\"\n  | \"k3tog-k3tog-k2tog\"\n  | \"sk2p-sk2p-ssk\"\n  | \"k3tog-sk2p-ssk\"\n  | \"sk2p-k3tog-k2tog\";\n\nexport interface OptionType {\n  avoidEnds: boolean;\n  sts: DecStsType | IncStsType;\n  count: number;\n  hasDoubleNest: boolean;\n}\n\n// Get truly even increase or decrease instruction\nexport function getTrulyEven(\n  startSts: number,\n  endSts: number,\n  option: OptionType\n): { sts: string[]; avoidEndAvailable: boolean; doubleNestAvailable: boolean } {\n  let avoidEndAvailable = true;\n  let doubleNestAvailable = false;\n\n  // Inc/Dec stitch point list\n  const stsPoints =\n    option.count === 3\n      ? getDec2StsList(startSts, endSts)\n      : getChangeStsList(startSts, endSts);\n  const { avoidEnds, sts, count, hasDoubleNest } = option;\n\n  // If users don't want to end with inc/dec at the end, start it early\n  const tailSts = Math.floor((stsPoints[0] - count) / 2);\n  if (tailSts === 0) {\n    avoidEndAvailable = false;\n  }\n  if (avoidEnds) {\n    stsPoints[0] -= tailSts;\n  }\n\n  // Generate text from all 'k' include increase or decreases stitches\n  const incDecStsList = stsPoints.map((stsCount, i) => {\n    const stsTypes = sts.split(\"-\");\n    return count === 3 &&\n      i === stsPoints.length - 1 &&\n      (endSts - startSts) % 2 !== 0 // orphan increase for 2 sts dec\n      ? `k${stsCount - 2}, ${stsTypes[2]}`\n      : `k${stsCount - count}, ${\n          // For increase, count is 0 since it's adding a new M stitch\n          i < stsPoints.length / 2 ? stsTypes[0] : stsTypes[1]\n        }`;\n  });\n  if (avoidEnds && tailSts > 0) {\n    incDecStsList.push(`k${tailSts}`);\n  }\n\n  // Repeated stitches are now presented with \"X times\"\n  const stsMultiplied: string[] = getStsListRepeats(incDecStsList);\n\n  // Check multiple increase groups are repeated\n  // e.g., [(k2, m1), (k3, m1) x 3] x 4\n  let repeatCheckIdx = 0;\n\n  const nested = stsMultiplied.reduce((labels: string[], sts, idx) => {\n    // Skip sts that's already applied to the previous repeats\n    if (idx < repeatCheckIdx) {\n      return labels;\n    }\n    // Recursive: if repeats aren't found, increase the number of repeated sts\n    // start with two (e.g., (k2, m1), (k3, m1) x 3)\n    function checkRepeats(count: number): string[][] {\n      const repeats = [stsMultiplied.slice(idx, idx + count)];\n      for (let i = idx + count; i <= stsMultiplied.length - count; i += count) {\n        // check if the following repeats are the same\n        if (\n          JSON.stringify(repeats[0]) ===\n          JSON.stringify(stsMultiplied.slice(i, i + count))\n        ) {\n          repeats.push(repeats[0]);\n          doubleNestAvailable = true;\n        } else {\n          break;\n        }\n      }\n      if (repeats.length > 1 || count > stsMultiplied.length / 2) {\n        return repeats;\n      }\n      return checkRepeats(count + 1);\n    }\n\n    const repeats = checkRepeats(2);\n\n    if (repeats.length > 1) {\n      const labelRepeats = repeats[0];\n      labels.push(`[${labelRepeats.join(\", \")}] x ${repeats.length}`);\n      // Skip all repeated ones\n      repeatCheckIdx += repeats.flat().length;\n    } else {\n      labels.push(sts);\n      // Go to the next repeat\n      repeatCheckIdx++;\n    }\n    return labels;\n  }, []);\n\n  return {\n    sts: hasDoubleNest ? nested : stsMultiplied,\n    avoidEndAvailable,\n    doubleNestAvailable,\n  };\n}\n"],"names":["BodyInstruction","_ref","schema","measurement","endSts","total","body","waistDec","decText","getTrulyEven","avoidEnds","sts","count","hasDoubleNest","startRowID","raglan","every2","every4","_jsxs","_Fragment","children","_jsx","SectionInstruction","title","rowType","concat","rows","text","underarm","notes","afterList","getInchAndCm","hem","join","startSts","option","avoidEndAvailable","doubleNestAvailable","stsPoints","getDec2StsList","getChangeStsList","tailSts","Math","floor","incDecStsList","map","stsCount","i","stsTypes","split","length","push","stsMultiplied","getStsListRepeats","repeatCheckIdx","nested","reduce","labels","idx","repeats","checkRepeats","slice","JSON","stringify","labelRepeats","flat"],"sourceRoot":""}