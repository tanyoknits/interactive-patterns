{"version":3,"file":"static/js/869.105e26be.chunk.js","mappings":"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","sources":["patternMakers/cardigan.ts","projects/salvia-cardigan/pattern.ts","projects/salvia-cardigan/profile.ts","projects/salvia-cardigan/sizes.ts"],"sourcesContent":["import {\n  getEven,\n  getRound,\n  BasePattern,\n  spliceRow,\n  definition,\n  getMergedBasePattern,\n  getDec1StsIDList,\n  getRawStsFromBaseRow,\n} from \"@tanyoknits/shared\";\nimport { RaglanMeasurement } from \"../utils/sizeBase\";\nimport { getLineSRCount } from \"./shortRow\";\nimport { getSleeveDecRows } from \"./common\";\n\nconst { k, rli, lli, m1r, m1l, sr_rs, sr_ws, empty, koco, k2tog, ssk } =\n  definition;\n\nexport const topDownVNeckRaglanOverview: string[] = [\n  \"After CO, starting from the front left neck, work from the top down flat.\",\n  \"Short row shaping is worked as you increase stitches in raglan yoke.\",\n  \"As you keep working on raglan yoke, incorporate stitch patterns\",\n  \"After you finish the raglan increase, separate body and sleeves, put sleeve stitches in scrap yarn or stitch holder.\",\n  \"Work the body flat as you keep working stitch patterns. Work the sleeves before each cuff.\",\n  \"Work button band along the two sides of front and neck, add button holes on the front right as you go.\",\n  \"Sew buttons on the other left side of button band.\",\n];\n\nexport interface VNeckCardiganPattern {\n  co: number;\n  start: {\n    sleeve: number;\n    back: number;\n    frontOneSide: number;\n  };\n  raglan: {\n    every2Rows: number;\n    every4Rows: number;\n    frontIncSkip: number;\n  };\n  vNeck: {\n    every4RowWithRaglan: number;\n    every4RowAfterRaglan: number;\n  };\n  yokeSplit: {\n    body: number;\n    back: number;\n    frontOneSide: number;\n    sleeve: number;\n    underarm: number;\n    sleeveAdj: number;\n  };\n  total: {\n    bodyBeforeVInc: number;\n    sleeve: number;\n    body: number;\n  };\n  rows: {\n    every2RowIncStart: number;\n    every4RowIncStart: number;\n    split: number;\n    afterRaglanIncStart: number;\n    lastNeckInc: number;\n    hemDecStart: number;\n    bo: number;\n  };\n  arm: {\n    cuffSts: number;\n    decOffset: number;\n    decRows: number[];\n    cuffDecRow: number;\n    cuffDecSts: number;\n    cuffBO: number;\n  };\n  totalSts: number;\n}\n\nexport function getVNeckPatternSchema(\n  stsPer4Inch: number,\n  rowPer4Inch: number,\n  measurement: RaglanMeasurement,\n  sleeveAdj: number = 0,\n  cuffRatio: number = 1.2\n): VNeckCardiganPattern {\n  const stsGauge = stsPer4Inch / 4;\n  const rowGauge = rowPer4Inch / 4;\n\n  const totalNeck = measurement.neck_circumference * stsGauge;\n  const totalEachSleeve = measurement.under_arm_circumference * stsGauge;\n  const underarm = measurement.underarm * stsGauge;\n  const sleeveYorkEnd = totalEachSleeve - underarm;\n  const totalBust = measurement.bust_circumference * stsGauge;\n  const bodyYorkEnd = totalBust - underarm * 2;\n  const totalYork = measurement.yoke_length * rowGauge;\n  const totalYorkEnd = sleeveYorkEnd * 2 + bodyYorkEnd;\n  const yokeBase = {\n    sleeve: getRound(sleeveYorkEnd),\n    body: getRound(bodyYorkEnd),\n  };\n\n  // CO & Increase\n  const totalInc8 = getRound((totalYorkEnd - totalNeck) / 8);\n  const start = {\n    sleeve: getEven(yokeBase.sleeve - totalInc8 * 2),\n    back: getEven((yokeBase.body - totalInc8 * 4) / 2),\n    frontOneSide: 2,\n  };\n  const co = start.sleeve * 2 + start.back + start.frontOneSide * 2;\n  const every2Rows = Math.round((totalYorkEnd - totalNeck - 2 * totalYork) / 4);\n  const every4Rows = totalInc8 - every2Rows;\n  const frontIncSkip = getEven((measurement.neck_depth * rowGauge) / 2);\n  const raglan = { every2Rows, every4Rows, frontIncSkip };\n\n  // Front V increase\n  const buttonBandSts = getRound(measurement.neck_band_height * stsGauge) - 2;\n  const frontSts = getRound(start.back / 2) - getRound(buttonBandSts / 2);\n  const ragIncRowEnd = 1 + every2Rows * 2 + every4Rows * 4;\n  const every4RowWithRaglan = Math.ceil(ragIncRowEnd / 4) - frontIncSkip / 2;\n  const every4RowAfterRaglan = frontSts - every4RowWithRaglan;\n  const yokeSplitBack = start.back + totalInc8 * 2;\n  const yokeSplitFrontOneSide =\n    start.frontOneSide + every4RowWithRaglan + totalInc8;\n  const yokeSplit = {\n    sleeve: start.sleeve + totalInc8 * 2,\n    back: yokeSplitBack,\n    frontOneSide: yokeSplitFrontOneSide,\n    body: yokeSplitBack + yokeSplitFrontOneSide * 2,\n    underarm: getEven(underarm),\n    sleeveAdj,\n  };\n\n  // Total\n  const endBody = yokeSplit.body + yokeSplit.underarm * 2 - sleeveAdj * 2;\n  const endSleeve = yokeSplit.sleeve + yokeSplit.underarm + sleeveAdj;\n  const endBodyWithVInc = endBody + every4RowAfterRaglan * 2;\n  const total = {\n    bodyBeforeVInc: endBody,\n    sleeve: endSleeve,\n    body: endBodyWithVInc,\n  };\n\n  // Rows\n  const startRow = 1;\n  const every2RowIncStart = startRow;\n  const every4RowIncStart = every2RowIncStart + raglan.every2Rows * 2;\n  const splitRow = every4RowIncStart + raglan.every4Rows * 4;\n  const afterRaglanIncStart = splitRow + 2;\n  const hemRow = measurement.hem * rowGauge;\n  const hemDecStart = getEven(measurement.total_length * rowGauge - hemRow) - 1;\n\n  // Sleeve\n  const cuffRow = getRound(measurement.cuff_length * rowGauge);\n  const cuffSts = getEven(measurement.wrist_circumference * stsGauge);\n  const decOffset = getRound(rowGauge * 2); // 2 inch\n  const sleeveRow = getRound(\n    measurement.sleeve_length_from_underarm * rowGauge\n  );\n  const beforeCuffSts = getRound(cuffSts * 1.4); // cuff ratio\n  // Rows with no stitch decrease from underarm\n  const decAvailableRow = sleeveRow - cuffRow - decOffset - 2;\n  const taperDecTimes = getEven(total.sleeve - beforeCuffSts) / 2;\n  const decRows = getSleeveDecRows(decAvailableRow, taperDecTimes);\n  const cuffDecSts = total.sleeve - taperDecTimes * 2 - cuffSts;\n  const cuffDecRow = sleeveRow - cuffRow - 2;\n  const cuffBO = cuffDecRow + 2 + getRound(cuffRow * 1.2);\n\n  return {\n    co,\n    start,\n    raglan,\n    vNeck: {\n      every4RowWithRaglan,\n      every4RowAfterRaglan,\n    },\n    yokeSplit,\n    total,\n    rows: {\n      every2RowIncStart,\n      every4RowIncStart,\n      split: splitRow,\n      afterRaglanIncStart,\n      lastNeckInc: afterRaglanIncStart + every4RowAfterRaglan * 4 - 2,\n      hemDecStart,\n      bo: hemDecStart + getRound(hemRow * cuffRatio),\n    },\n    arm: {\n      cuffSts,\n      decOffset,\n      decRows,\n      cuffDecRow,\n      cuffDecSts,\n      cuffBO,\n    },\n    totalSts: 0,\n  };\n}\n\nexport function getYokeBasePatternByParts(\n  leftBasePattern: BasePattern,\n  rightBasePattern: BasePattern,\n  backBasePattern: BasePattern,\n  yokeBasePattern: BasePattern,\n  schema: VNeckCardiganPattern\n): BasePattern[] {\n  // Base chart\n  const leftBaseChart = leftBasePattern.baseChart;\n  const rightBaseChart = rightBasePattern.baseChart;\n  const backBaseChart = backBasePattern.baseChart;\n  const leftSleeveYokeBaseChart = [\n    ...yokeBasePattern.baseChart.map((row) => {\n      return [...row];\n    }),\n  ];\n  const rightSleeveYokeBaseChart = [\n    ...yokeBasePattern.baseChart.map((row) => {\n      return [...row];\n    }),\n  ];\n\n  const { start, raglan, vNeck, yokeSplit } = schema;\n  const { sleeve } = start;\n  const { every4RowWithRaglan, every4RowAfterRaglan } = vNeck;\n  const { every2Rows, every4Rows, frontIncSkip } = raglan;\n  const { frontOneSide } = yokeSplit;\n\n  // Each front side stitch count\n  const stsCount = frontOneSide + every4RowAfterRaglan;\n  const vNeckInc = every4RowWithRaglan + every4RowAfterRaglan;\n  const raglanInc = every2Rows + every4Rows;\n\n  // Short row\n  for (let i = 0; i < frontIncSkip * 2; i++) {\n    spliceRow(leftBaseChart[i], 0, stsCount);\n    spliceRow(rightBaseChart[i], 0, stsCount);\n    spliceRow(leftSleeveYokeBaseChart[i], 0, raglanInc);\n    spliceRow(rightSleeveYokeBaseChart[i], null, raglanInc);\n    if (i === 0) {\n      spliceRow(leftBaseChart[i], vNeckInc, 2, k);\n    }\n    if (i === frontIncSkip * 2 - 2) {\n      spliceRow(rightBaseChart[i], stsCount - vNeckInc - 2, 2, k);\n    }\n    if (i === frontIncSkip * 2 - 1) {\n      spliceRow(leftBaseChart[i], vNeckInc, 2, k);\n      spliceRow(rightBaseChart[i], stsCount - vNeckInc - 2, 2, k);\n    }\n  }\n  const necklineSR = getLineSRCount(sleeve, frontIncSkip * 2);\n  necklineSR.slice(0, frontIncSkip - 1).forEach((count, i) => {\n    spliceRow(leftSleeveYokeBaseChart[i * 2 + 1], raglanInc, count, [\n      ...Array(count - 1).fill(empty),\n      sr_rs,\n    ]);\n    spliceRow(leftSleeveYokeBaseChart[i * 2 + 2], raglanInc, count);\n    spliceRow(rightSleeveYokeBaseChart[i * 2], null, raglanInc + count, [\n      sr_ws,\n      ...Array(count - 1).fill(empty),\n    ]);\n    spliceRow(rightSleeveYokeBaseChart[i * 2 + 1], null, raglanInc + count);\n  });\n\n  // Neck line increase\n  for (let i = 0; i < vNeckInc; i++) {\n    const baseRowID = frontIncSkip * 2 + i * 4;\n    const emptyCount = vNeckInc - i - 1;\n    const emptySts = Array(emptyCount).fill(empty);\n    const k2 = [k, k];\n    if (leftBaseChart[baseRowID] == null) {\n      break;\n    }\n    spliceRow(leftBaseChart[baseRowID], 0, emptyCount + 4, [\n      ...emptySts,\n      k,\n      m1r,\n      ...k2,\n    ]);\n    spliceRow(rightBaseChart[baseRowID], null, emptyCount + 4, [\n      ...k2,\n      m1l,\n      k,\n      ...emptySts,\n    ]);\n    for (let j = 1; j < 4; j++) {\n      const leftRow = leftBaseChart[baseRowID + j];\n      const rightRow = rightBaseChart[baseRowID + j];\n      if (leftRow == null || rightRow == null) {\n        break;\n      }\n      spliceRow(leftRow, 0, emptyCount + 2, [...emptySts, ...k2]);\n      spliceRow(rightRow, null, emptyCount + 2, [...k2, ...emptySts]);\n    }\n  }\n\n  // Raglan increase\n  function increaseRaglan(\n    everyXRows: number,\n    times: number,\n    startEmptyCount: number,\n    startRowID: number,\n    side: \"front\" | \"back\"\n  ): void {\n    for (let i = 0; i < times; i++) {\n      const baseRowID = startRowID + i * everyXRows;\n      const emptyCount = startEmptyCount - i - 1;\n      const emptySts = Array(emptyCount).fill(empty);\n      for (let j = 0; j < everyXRows; j++) {\n        const lb = leftBaseChart[baseRowID + j];\n        const rb = rightBaseChart[baseRowID + j];\n        const ls = leftSleeveYokeBaseChart[baseRowID + j];\n        const rs = rightSleeveYokeBaseChart[baseRowID + j];\n        const bb = backBaseChart[baseRowID + j];\n        const parts = side === \"front\" ? [lb, rb, ls, rs] : [bb, bb, rs, ls];\n        if (j === 0) {\n          spliceRow(parts[0], null, emptyCount + 2, [rli, k, ...emptySts]);\n          spliceRow(parts[1], 0, emptyCount + 2, [...emptySts, k, lli]);\n          spliceRow(parts[2], 0, emptyCount + 2, [...emptySts, k, lli]);\n          spliceRow(parts[3], null, emptyCount + 2, [rli, k, ...emptySts]);\n        } else {\n          spliceRow(parts[0], null, emptyCount + 1, [k, ...emptySts]);\n          spliceRow(parts[1], 0, emptyCount + 1, [...emptySts, k]);\n          spliceRow(parts[2], 0, emptyCount + 1, [...emptySts, k]);\n          spliceRow(parts[3], null, emptyCount + 1, [k, ...emptySts]);\n        }\n      }\n    }\n  }\n\n  increaseRaglan(\n    2,\n    every2Rows + frontIncSkip,\n    raglanInc,\n    frontIncSkip * 2,\n    \"front\"\n  );\n  increaseRaglan(\n    4,\n    every4Rows - frontIncSkip,\n    raglanInc - every2Rows - frontIncSkip,\n    frontIncSkip * 2 + (every2Rows + frontIncSkip) * 2,\n    \"front\"\n  );\n  increaseRaglan(2, every2Rows, raglanInc, 0, \"back\");\n  increaseRaglan(4, every4Rows, raglanInc - every2Rows, every2Rows * 2, \"back\");\n\n  return [\n    leftBasePattern,\n    {\n      ...yokeBasePattern,\n      baseChart: leftSleeveYokeBaseChart,\n    },\n    backBasePattern,\n    {\n      ...yokeBasePattern,\n      baseChart: rightSleeveYokeBaseChart,\n    },\n    rightBasePattern,\n  ];\n}\n\nexport function getBodyStartBasePattern(\n  frontLeft: BasePattern,\n  back: BasePattern,\n  frontRight: BasePattern,\n  underarm: number\n): BasePattern {\n  const coRow = back.baseChart[0];\n  spliceRow(coRow, 0, underarm, koco);\n  spliceRow(coRow, null, underarm, koco);\n  return getMergedBasePattern([frontLeft, back, frontRight]);\n}\n\nexport function getSleeveBasePattern(\n  basePattern: BasePattern,\n  schema: VNeckCardiganPattern\n): BasePattern {\n  const split = schema.rows.split;\n  const { cuffDecRow, decRows, cuffSts } = schema.arm;\n\n  const baseChart = basePattern.baseChart.slice(split, split + cuffDecRow);\n  decRows.forEach((decRow, i) => {\n    const baseRow = baseChart[decRow];\n    const emptyCount = i + 1;\n    const emptySts = Array(emptyCount).fill(empty);\n    spliceRow(baseRow, 0, emptyCount + 3, [...emptySts, k, k, k2tog]);\n    spliceRow(baseRow, null, emptyCount + 3, [ssk, k, k, ...emptySts]);\n    const nextRowID = i < decRows.length - 1 ? decRows[i + 1] : cuffDecRow;\n    for (let j = decRow + 1; j < nextRowID; j++) {\n      const row = baseChart[j];\n      spliceRow(row, 0, emptyCount);\n      spliceRow(row, null, emptyCount);\n    }\n  });\n  const cuffDecStsList = getDec1StsIDList(\n    schema.total.sleeve - decRows.length * 2,\n    cuffSts\n  );\n\n  // Cuff sts decrease\n  const baseRow = baseChart[cuffDecRow - 1];\n  const baseRowSts = getRawStsFromBaseRow(baseRow);\n  spliceRow(\n    baseRow,\n    0,\n    baseRow.length,\n    baseRowSts.map((s) => definition[s])\n  );\n  cuffDecStsList.forEach((decStsID, i) => {\n    const stsID = decStsID + decRows.length;\n    spliceRow(baseRow, stsID, 2, [k2tog, empty]);\n  });\n\n  return { ...basePattern, baseChart };\n}\n","import { PageInfo, PatternInfo } from \"../../utils/types\";\nimport { sizes } from \"./sizes\";\n\nconst pageInfo: PageInfo[] = [\n  {\n    id: \"overview\",\n    label: \"Overview\",\n    isLinear: true,\n  },\n  { id: \"yoke\", label: \"Yoke\", isLinear: true },\n  { id: \"body\", label: \"Body\", isLinear: true },\n  { id: \"sleeve\", label: \"Sleeve\", isLinear: true },\n  { id: \"button-band\", label: \"Button band\" },\n];\n\n// For Pattern page wrapper\nexport const patternInfo: PatternInfo = {\n  pageInfo,\n  sizes,\n};\n","import { needles } from \"../../utils/needles\";\nimport { ProjectProfile } from \"../../utils/types\";\n\nconst profile: ProjectProfile = {\n  yarn: {\n    maker: \"Lana Grossa\",\n    line: \"Puno Luce\",\n    color: \"White\",\n    url: \"https://www.lana-grossa.de/en/yarns/detail/puno-luce/1123/\",\n    shape: \"ball\",\n    yards: 273,\n    grams: 50,\n  },\n  needles: [\n    {\n      type: \"circular\",\n      size: needles[7],\n      usage: \"Body\",\n    },\n    { type: \"circular\", size: needles[5], usage: \"Bands\" },\n  ],\n  gauge: {\n    sts: \"Stockinette stitch\",\n    sts_count: 26,\n    row_count: 36,\n    needle: needles[7],\n  },\n  notions: [\"Cable Needle\", \"Tapestry needle\", \"Stitch markers\"],\n  difficulty: \"Intermediate\",\n  photoCount: 0,\n};\n\nexport default profile;\n","import { IntroSizing } from \"../../utils/types\";\nimport {\n  Size,\n  baseBodySizing,\n  FOMeasurement,\n  raglanCoreParts,\n  RaglanMeasurement,\n  CustomizedFO,\n} from \"../../utils/sizeBase\";\nimport profile from \"./profile\";\nimport { getFOMeasurementBySize, getIntroSizingInfo } from \"../../utils/misc\";\nimport {\n  VNeckCardiganPattern,\n  getVNeckPatternSchema,\n} from \"../../patternMakers/cardigan\";\n\n// Size list\nexport const sizes: Size[] = [\"M\"];\n\nconst customizedSize: CustomizedFO = {\n  neck_circumference: [21.7],\n  neck_depth: [1],\n  bust_circumference: [41.04],\n  under_arm_circumference: [16.52],\n  wrist_circumference: [10.4],\n  total_length: [24],\n  sleeve_length_from_underarm: [17.5],\n  underarm: [41.04 / 20],\n  yoke_length: [9.25],\n  neck_band_height: [1],\n  arm_band_height: [1],\n  hem: [2],\n};\n\nexport const measurements: FOMeasurement[] = getFOMeasurementBySize(\n  sizes,\n  raglanCoreParts,\n  customizedSize\n);\n\nexport const schemaBySize: VNeckCardiganPattern[] = measurements.map((m, i) => {\n  return getVNeckPatternSchema(\n    profile.gauge.sts_count,\n    profile.gauge.row_count,\n    m as RaglanMeasurement\n  );\n});\n\nexport const introSizing: IntroSizing = getIntroSizingInfo(\n  sizes,\n  baseBodySizing,\n  measurements,\n  schemaBySize.map((schema) => schema.totalSts),\n  [\"bust\"],\n  [\n    \"bust_circumference\",\n    \"neck_circumference\",\n    \"under_arm_circumference\",\n    \"sleeve_length_from_underarm\",\n    \"total_length\",\n  ]\n);\n"],"names":["k","definition","rli","lli","m1r","m1l","sr_rs","sr_ws","empty","koco","k2tog","ssk","topDownVNeckRaglanOverview","getVNeckPatternSchema","stsPer4Inch","rowPer4Inch","measurement","sleeveAdj","arguments","length","undefined","cuffRatio","stsGauge","rowGauge","totalNeck","neck_circumference","totalEachSleeve","under_arm_circumference","underarm","sleeveYorkEnd","bodyYorkEnd","bust_circumference","totalYork","yoke_length","totalYorkEnd","yokeBase","getRound","totalInc8","start","sleeve","getEven","back","frontOneSide","co","every2Rows","Math","round","every4Rows","frontIncSkip","neck_depth","raglan","buttonBandSts","neck_band_height","frontSts","ragIncRowEnd","every4RowWithRaglan","ceil","every4RowAfterRaglan","yokeSplitBack","yokeSplitFrontOneSide","yokeSplit","body","endBody","total","bodyBeforeVInc","every4RowIncStart","splitRow","afterRaglanIncStart","hemRow","hem","hemDecStart","total_length","cuffRow","cuff_length","cuffSts","wrist_circumference","decOffset","sleeveRow","sleeve_length_from_underarm","beforeCuffSts","decAvailableRow","taperDecTimes","decRows","getSleeveDecRows","cuffDecSts","cuffDecRow","cuffBO","vNeck","rows","every2RowIncStart","split","lastNeckInc","bo","arm","totalSts","getYokeBasePatternByParts","leftBasePattern","rightBasePattern","backBasePattern","yokeBasePattern","schema","leftBaseChart","baseChart","rightBaseChart","backBaseChart","leftSleeveYokeBaseChart","_toConsumableArray","map","row","rightSleeveYokeBaseChart","stsCount","vNeckInc","raglanInc","i","spliceRow","getLineSRCount","slice","forEach","count","concat","Array","fill","baseRowID","emptyCount","emptySts","k2","j","leftRow","rightRow","increaseRaglan","everyXRows","times","startEmptyCount","startRowID","side","lb","rb","ls","rs","bb","parts","_objectSpread","getBodyStartBasePattern","frontLeft","frontRight","coRow","getMergedBasePattern","getSleeveBasePattern","basePattern","_schema$arm","decRow","baseRow","nextRowID","cuffDecStsList","getDec1StsIDList","baseRowSts","getRawStsFromBaseRow","s","decStsID","stsID","patternInfo","pageInfo","id","label","isLinear","sizes","profile","yarn","maker","line","color","url","shape","yards","grams","needles","type","size","usage","gauge","sts","sts_count","row_count","needle","notions","difficulty","photoCount","measurements","getFOMeasurementBySize","raglanCoreParts","arm_band_height","schemaBySize","m","introSizing","getIntroSizingInfo","baseBodySizing"],"sourceRoot":""}