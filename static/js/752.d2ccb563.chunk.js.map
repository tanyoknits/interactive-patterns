{"version":3,"file":"static/js/752.d2ccb563.chunk.js","mappings":"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","sources":["components/COInstruction.tsx","components/InteractiveAlert.tsx","components/InteractivePattern.tsx","components/StitchPattern.tsx","layout/PageContentWrapper.tsx","patternMakers/cardigan.ts","projects/salvia-cardigan/Instruction.tsx","projects/salvia-cardigan/motifs.ts","projects/salvia-cardigan/profile.ts","projects/salvia-cardigan/sizes.ts","projects/salvia-cardigan/stitches.tsx"],"sourcesContent":["import SectionInstruction from \"@tanyoknits/shared/src/components/SectionInstruction\";\nimport { COProps } from \"../utils/types\";\n\nexport default function COInstruction({\n  needle,\n  method,\n  direction,\n  coCount,\n}: COProps) {\n  return (\n    <SectionInstruction\n      intro={`🪡 With a ${needle} needle${\n        method != null ? ` using ${method} method` : \"\"\n      }`}\n      rows={[\n        {\n          text: `CO ${coCount} ${\n            direction === \"round\" ? \"in the rnd\" : \"flat\"\n          }`,\n        },\n      ]}\n      rowType={\"CO\"}\n      afterList={\n        direction === \"round\"\n          ? [\"Pm at the end to indicate BOR (middle back)\"]\n          : []\n      }\n    />\n  );\n}\n","import { Alert, AlertIcon } from \"@chakra-ui/react\";\n\ninterface Props {\n  isRow?: boolean;\n}\n\nexport default function InteractiveAlert({ isRow = false }: Props) {\n  return (\n    <Alert width=\"fit-content\">\n      <AlertIcon />\n      Chart is interactive - click a {isRow ? \"row\" : \"stitch group\"} to see the\n      corresponding written instruction.\n    </Alert>\n  );\n}\n","import { Box, Flex } from \"@chakra-ui/react\";\nimport { useState } from \"react\";\nimport DisplayOptions from \"./DisplayOptions\";\nimport {\n  ChartComponent,\n  ChartProps,\n  FocusType,\n  PlainTextList,\n  Written,\n} from \"@tanyoknits/shared\";\nimport { PatternPartInstruction } from \"../utils/types\";\nimport COInstruction from \"./COInstruction\";\nimport InteractiveAlert from \"./InteractiveAlert\";\n\ninterface Props {\n  chart: ChartProps;\n  instruction?: PatternPartInstruction;\n}\n\nexport default function InteractivePattern({ chart, instruction }: Props) {\n  const [menu, setMenu] = useState<string>(\"1\");\n  const [focus, setFocus] = useState<FocusType>([0, null]);\n\n  return (\n    <Flex direction=\"column\" gap={4}>\n      {instruction?.co != null && <COInstruction {...instruction?.co} />}\n      {instruction?.beforeList != null && (\n        <PlainTextList list={instruction?.beforeList} />\n      )}\n      <DisplayOptions\n        menu={menu}\n        setMenu={setMenu}\n        options={[\"Chart\", \"Inline (text)\", \"Split by motif (text)\"]}\n      />\n      {menu === \"1\" && (\n        <>\n          <InteractiveAlert isRow={true} />\n          <Box width=\"100%\" overflow=\"auto\">\n            <ChartComponent\n              {...chart}\n              focus={focus}\n              setFocus={setFocus}\n              isOnlyRowClickable={true}\n            />\n          </Box>\n        </>\n      )}\n      {menu === \"2\" && <Written {...chart} />}\n      {menu === \"3\" && <Written {...chart} display=\"block\" />}\n      {instruction?.afterList != null && (\n        <PlainTextList list={instruction?.afterList} />\n      )}\n    </Flex>\n  );\n}\n","import { Flex, Text, VStack } from \"@chakra-ui/react\";\nimport { MotifBySizeItem } from \"../utils/types\";\nimport { useState } from \"react\";\nimport {\n  MotifComponent,\n  StitchList,\n  getUniqueStsFromChart,\n} from \"@tanyoknits/shared\";\nimport SelectSize from \"./SelectSize\";\nimport InteractiveAlert from \"./InteractiveAlert\";\ninterface Props {\n  intro?: string;\n  motifBySize: MotifBySizeItem[];\n  showReflected?: boolean;\n}\nexport default function StitchPattern({\n  intro,\n  motifBySize,\n  showReflected = false,\n}: Props) {\n  const [selectedSize, setSelectedSize] = useState<number>(0);\n  const { motif, direction } = motifBySize[selectedSize] ?? motifBySize[0];\n  const stitches = getUniqueStsFromChart(motif.chart);\n\n  return (\n    <Flex direction=\"column\" gap={6}>\n      {intro != null && <Text>{intro}</Text>}\n      <VStack spacing={6} align=\"left\">\n        <Flex gap={6} alignItems=\"center\" flexWrap=\"wrap\">\n          {motifBySize.length > 1 && (\n            <SelectSize\n              sizes={motifBySize.map((m) => m.sizes.join(\", \"))}\n              selectedSize={selectedSize}\n              onChange={(id: number) => setSelectedSize(id)}\n            />\n          )}\n          <InteractiveAlert />\n        </Flex>\n        <MotifComponent {...motif} direction={direction} />\n        <StitchList stitches={stitches} hasWS={true} />\n      </VStack>\n    </Flex>\n  );\n}\n","import { Flex } from \"@chakra-ui/react\";\n\nexport default function PageContentWrapper({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <Flex direction=\"column\" gap={8} mb={2} pt={2}>\n      {children}\n    </Flex>\n  );\n}\n","import {\n  getEven,\n  getRound,\n  BasePattern,\n  spliceRow,\n  definition,\n  getMergedBasePattern,\n  getDec1StsIDList,\n  getRawStsFromBaseRow,\n} from \"@tanyoknits/shared\";\nimport { RaglanMeasurement } from \"../utils/sizeBase\";\nimport { getLineSRCount } from \"./shortRow\";\nimport { getSleeveDecRows } from \"./common\";\n\nconst { k, rli, lli, m1r, m1l, sr_rs, sr_ws, empty, koco, k2tog, ssk } =\n  definition;\n\nexport const topDownVNeckRaglanOverview: string[] = [\n  \"After CO, starting from the front left neck, work from the top down flat.\",\n  \"Short row shaping is worked as you increase stitches in raglan yoke.\",\n  \"As you keep working on raglan yoke, incorporate stitch patterns\",\n  \"After you finish the raglan increase, separate body and sleeves, put sleeve stitches in scrap yarn or stitch holder.\",\n  \"Work the body flat as you keep working stitch patterns. Work the sleeves before each cuff.\",\n  \"Work button band along the two sides of front and neck, add button holes on the front right as you go.\",\n  \"Sew buttons on the other left side of button band.\",\n];\n\nexport interface VNeckCardiganPattern {\n  co: number;\n  start: {\n    sleeve: number;\n    back: number;\n    frontOneSide: number;\n  };\n  raglan: {\n    every2Rows: number;\n    every4Rows: number;\n    frontIncSkip: number;\n  };\n  vNeck: {\n    every4RowWithRaglan: number;\n    every4RowAfterRaglan: number;\n  };\n  yokeSplit: {\n    body: number;\n    back: number;\n    frontOneSide: number;\n    sleeve: number;\n    underarm: number;\n    sleeveAdj: number;\n  };\n  total: {\n    bodyBeforeVInc: number;\n    sleeve: number;\n    body: number;\n  };\n  rows: {\n    every2RowIncStart: number;\n    every4RowIncStart: number;\n    split: number;\n    afterRaglanIncStart: number;\n    lastNeckInc: number;\n    hemDecStart: number;\n    bo: number;\n  };\n  arm: {\n    cuffSts: number;\n    decOffset: number;\n    decRows: number[];\n    cuffDecRow: number;\n    cuffDecSts: number;\n    cuffBO: number;\n  };\n  totalSts: number;\n}\n\nexport function getVNeckPatternSchema(\n  stsPer4Inch: number,\n  rowPer4Inch: number,\n  measurement: RaglanMeasurement,\n  sleeveAdj: number = 0,\n  cuffRatio: number = 1.2\n): VNeckCardiganPattern {\n  const stsGauge = stsPer4Inch / 4;\n  const rowGauge = rowPer4Inch / 4;\n\n  const totalNeck = measurement.neck_circumference * stsGauge;\n  const totalEachSleeve = measurement.under_arm_circumference * stsGauge;\n  const underarm = measurement.underarm * stsGauge;\n  const sleeveYorkEnd = totalEachSleeve - underarm;\n  const totalBust = measurement.bust_circumference * stsGauge;\n  const bodyYorkEnd = totalBust - underarm * 2;\n  const totalYork = measurement.yoke_length * rowGauge;\n  const totalYorkEnd = sleeveYorkEnd * 2 + bodyYorkEnd;\n  const yokeBase = {\n    sleeve: getRound(sleeveYorkEnd),\n    body: getRound(bodyYorkEnd),\n  };\n\n  // CO & Increase\n  const totalInc8 = getRound((totalYorkEnd - totalNeck) / 8);\n  const start = {\n    sleeve: getEven(yokeBase.sleeve - totalInc8 * 2),\n    back: getEven((yokeBase.body - totalInc8 * 4) / 2),\n    frontOneSide: 2,\n  };\n  const co = start.sleeve * 2 + start.back + start.frontOneSide * 2;\n  const every2Rows = Math.round((totalYorkEnd - totalNeck - 2 * totalYork) / 4);\n  const every4Rows = totalInc8 - every2Rows;\n  const frontIncSkip = getEven((measurement.neck_depth * rowGauge) / 2);\n  const raglan = { every2Rows, every4Rows, frontIncSkip };\n\n  // Front V increase\n  const buttonBandSts = getRound(measurement.neck_band_height * stsGauge) - 2;\n  const frontSts = getRound(start.back / 2) - getRound(buttonBandSts / 2);\n  const ragIncRowEnd = 1 + every2Rows * 2 + every4Rows * 4;\n  const every4RowWithRaglan = Math.ceil(ragIncRowEnd / 4) - frontIncSkip / 2;\n  const every4RowAfterRaglan = frontSts - every4RowWithRaglan;\n  const yokeSplitBack = start.back + totalInc8 * 2;\n  const yokeSplitFrontOneSide =\n    start.frontOneSide + every4RowWithRaglan + totalInc8;\n  const yokeSplit = {\n    sleeve: start.sleeve + totalInc8 * 2,\n    back: yokeSplitBack,\n    frontOneSide: yokeSplitFrontOneSide,\n    body: yokeSplitBack + yokeSplitFrontOneSide * 2,\n    underarm: getEven(underarm),\n    sleeveAdj,\n  };\n\n  // Total\n  const endBody = yokeSplit.body + yokeSplit.underarm * 2 - sleeveAdj * 2;\n  const endSleeve = yokeSplit.sleeve + yokeSplit.underarm + sleeveAdj;\n  const endBodyWithVInc = endBody + every4RowAfterRaglan * 2;\n  const total = {\n    bodyBeforeVInc: endBody,\n    sleeve: endSleeve,\n    body: endBodyWithVInc,\n  };\n\n  // Rows\n  const startRow = 1;\n  const every2RowIncStart = startRow;\n  const every4RowIncStart = every2RowIncStart + raglan.every2Rows * 2;\n  const splitRow = every4RowIncStart + raglan.every4Rows * 4;\n  const afterRaglanIncStart = splitRow + 2;\n  const hemRow = measurement.hem * rowGauge;\n  const hemDecStart = getEven(measurement.total_length * rowGauge - hemRow) - 1;\n\n  // Sleeve\n  const cuffRow = getRound(measurement.cuff_length * rowGauge);\n  const cuffSts = getEven(measurement.wrist_circumference * stsGauge);\n  const decOffset = getRound(rowGauge * 2); // 2 inch\n  const sleeveRow = getRound(\n    measurement.sleeve_length_from_underarm * rowGauge\n  );\n  const beforeCuffSts = getRound(cuffSts * 1.4); // cuff ratio\n  // Rows with no stitch decrease from underarm\n  const decAvailableRow = sleeveRow - cuffRow - decOffset - 2;\n  const taperDecTimes = getEven(total.sleeve - beforeCuffSts) / 2;\n  const decRows = getSleeveDecRows(decAvailableRow, taperDecTimes);\n  const cuffDecSts = total.sleeve - taperDecTimes * 2 - cuffSts;\n  const cuffDecRow = sleeveRow - cuffRow - 2;\n  const cuffBO = cuffDecRow + 2 + getRound(cuffRow * 1.2);\n\n  return {\n    co,\n    start,\n    raglan,\n    vNeck: {\n      every4RowWithRaglan,\n      every4RowAfterRaglan,\n    },\n    yokeSplit,\n    total,\n    rows: {\n      every2RowIncStart,\n      every4RowIncStart,\n      split: splitRow,\n      afterRaglanIncStart,\n      lastNeckInc: afterRaglanIncStart + every4RowAfterRaglan * 4 - 2,\n      hemDecStart,\n      bo: hemDecStart + getRound(hemRow * cuffRatio),\n    },\n    arm: {\n      cuffSts,\n      decOffset,\n      decRows,\n      cuffDecRow,\n      cuffDecSts,\n      cuffBO,\n    },\n    totalSts: 0,\n  };\n}\n\nexport function getYokeBasePatternByParts(\n  leftBasePattern: BasePattern,\n  rightBasePattern: BasePattern,\n  backBasePattern: BasePattern,\n  yokeBasePattern: BasePattern,\n  schema: VNeckCardiganPattern\n): BasePattern[] {\n  // Base chart\n  const leftBaseChart = leftBasePattern.baseChart;\n  const rightBaseChart = rightBasePattern.baseChart;\n  const backBaseChart = backBasePattern.baseChart;\n  const leftSleeveYokeBaseChart = [\n    ...yokeBasePattern.baseChart.map((row) => {\n      return [...row];\n    }),\n  ];\n  const rightSleeveYokeBaseChart = [\n    ...yokeBasePattern.baseChart.map((row) => {\n      return [...row];\n    }),\n  ];\n\n  const { start, raglan, vNeck, yokeSplit } = schema;\n  const { sleeve } = start;\n  const { every4RowWithRaglan, every4RowAfterRaglan } = vNeck;\n  const { every2Rows, every4Rows, frontIncSkip } = raglan;\n  const { frontOneSide } = yokeSplit;\n\n  // Each front side stitch count\n  const stsCount = frontOneSide + every4RowAfterRaglan;\n  const vNeckInc = every4RowWithRaglan + every4RowAfterRaglan;\n  const raglanInc = every2Rows + every4Rows;\n\n  // Short row\n  for (let i = 0; i < frontIncSkip * 2; i++) {\n    spliceRow(leftBaseChart[i], 0, stsCount);\n    spliceRow(rightBaseChart[i], 0, stsCount);\n    spliceRow(leftSleeveYokeBaseChart[i], 0, raglanInc);\n    spliceRow(rightSleeveYokeBaseChart[i], null, raglanInc);\n    if (i === 0) {\n      spliceRow(leftBaseChart[i], vNeckInc, 2, k);\n    }\n    if (i === frontIncSkip * 2 - 2) {\n      spliceRow(rightBaseChart[i], stsCount - vNeckInc - 2, 2, k);\n    }\n    if (i === frontIncSkip * 2 - 1) {\n      spliceRow(leftBaseChart[i], vNeckInc, 2, k);\n      spliceRow(rightBaseChart[i], stsCount - vNeckInc - 2, 2, k);\n    }\n  }\n  const necklineSR = getLineSRCount(sleeve, frontIncSkip * 2);\n  necklineSR.slice(0, frontIncSkip - 1).forEach((count, i) => {\n    spliceRow(leftSleeveYokeBaseChart[i * 2 + 1], raglanInc, count, [\n      ...Array(count - 1).fill(empty),\n      sr_rs,\n    ]);\n    spliceRow(leftSleeveYokeBaseChart[i * 2 + 2], raglanInc, count);\n    spliceRow(rightSleeveYokeBaseChart[i * 2], null, raglanInc + count, [\n      sr_ws,\n      ...Array(count - 1).fill(empty),\n    ]);\n    spliceRow(rightSleeveYokeBaseChart[i * 2 + 1], null, raglanInc + count);\n  });\n\n  // Neck line increase\n  for (let i = 0; i < vNeckInc; i++) {\n    const baseRowID = frontIncSkip * 2 + i * 4;\n    const emptyCount = vNeckInc - i - 1;\n    const emptySts = Array(emptyCount).fill(empty);\n    const k2 = [k, k];\n    if (leftBaseChart[baseRowID] == null) {\n      break;\n    }\n    spliceRow(leftBaseChart[baseRowID], 0, emptyCount + 4, [\n      ...emptySts,\n      k,\n      m1r,\n      ...k2,\n    ]);\n    spliceRow(rightBaseChart[baseRowID], null, emptyCount + 4, [\n      ...k2,\n      m1l,\n      k,\n      ...emptySts,\n    ]);\n    for (let j = 1; j < 4; j++) {\n      const leftRow = leftBaseChart[baseRowID + j];\n      const rightRow = rightBaseChart[baseRowID + j];\n      if (leftRow == null || rightRow == null) {\n        break;\n      }\n      spliceRow(leftRow, 0, emptyCount + 2, [...emptySts, ...k2]);\n      spliceRow(rightRow, null, emptyCount + 2, [...k2, ...emptySts]);\n    }\n  }\n\n  // Raglan increase\n  function increaseRaglan(\n    everyXRows: number,\n    times: number,\n    startEmptyCount: number,\n    startRowID: number,\n    side: \"front\" | \"back\"\n  ): void {\n    for (let i = 0; i < times; i++) {\n      const baseRowID = startRowID + i * everyXRows;\n      const emptyCount = startEmptyCount - i - 1;\n      const emptySts = Array(emptyCount).fill(empty);\n      for (let j = 0; j < everyXRows; j++) {\n        const lb = leftBaseChart[baseRowID + j];\n        const rb = rightBaseChart[baseRowID + j];\n        const ls = leftSleeveYokeBaseChart[baseRowID + j];\n        const rs = rightSleeveYokeBaseChart[baseRowID + j];\n        const bb = backBaseChart[baseRowID + j];\n        const parts = side === \"front\" ? [lb, rb, ls, rs] : [bb, bb, rs, ls];\n        if (j === 0) {\n          spliceRow(parts[0], null, emptyCount + 2, [rli, k, ...emptySts]);\n          spliceRow(parts[1], 0, emptyCount + 2, [...emptySts, k, lli]);\n          spliceRow(parts[2], 0, emptyCount + 2, [...emptySts, k, lli]);\n          spliceRow(parts[3], null, emptyCount + 2, [rli, k, ...emptySts]);\n        } else {\n          spliceRow(parts[0], null, emptyCount + 1, [k, ...emptySts]);\n          spliceRow(parts[1], 0, emptyCount + 1, [...emptySts, k]);\n          spliceRow(parts[2], 0, emptyCount + 1, [...emptySts, k]);\n          spliceRow(parts[3], null, emptyCount + 1, [k, ...emptySts]);\n        }\n      }\n    }\n  }\n\n  increaseRaglan(\n    2,\n    every2Rows + frontIncSkip,\n    raglanInc,\n    frontIncSkip * 2,\n    \"front\"\n  );\n  increaseRaglan(\n    4,\n    every4Rows - frontIncSkip,\n    raglanInc - every2Rows - frontIncSkip,\n    frontIncSkip * 2 + (every2Rows + frontIncSkip) * 2,\n    \"front\"\n  );\n  increaseRaglan(2, every2Rows, raglanInc, 0, \"back\");\n  increaseRaglan(4, every4Rows, raglanInc - every2Rows, every2Rows * 2, \"back\");\n\n  return [\n    leftBasePattern,\n    {\n      ...yokeBasePattern,\n      baseChart: leftSleeveYokeBaseChart,\n    },\n    backBasePattern,\n    {\n      ...yokeBasePattern,\n      baseChart: rightSleeveYokeBaseChart,\n    },\n    rightBasePattern,\n  ];\n}\n\nexport function getBodyStartBasePattern(\n  frontLeft: BasePattern,\n  back: BasePattern,\n  frontRight: BasePattern,\n  underarm: number\n): BasePattern {\n  const coRow = back.baseChart[0];\n  spliceRow(coRow, 0, underarm, koco);\n  spliceRow(coRow, null, underarm, koco);\n  return getMergedBasePattern([frontLeft, back, frontRight]);\n}\n\nexport function getSleeveBasePattern(\n  basePattern: BasePattern,\n  schema: VNeckCardiganPattern\n): BasePattern {\n  const split = schema.rows.split;\n  const { cuffDecRow, decRows, cuffSts } = schema.arm;\n\n  const baseChart = basePattern.baseChart.slice(split, split + cuffDecRow);\n  decRows.forEach((decRow, i) => {\n    const baseRow = baseChart[decRow];\n    const emptyCount = i + 1;\n    const emptySts = Array(emptyCount).fill(empty);\n    spliceRow(baseRow, 0, emptyCount + 3, [...emptySts, k, k, k2tog]);\n    spliceRow(baseRow, null, emptyCount + 3, [ssk, k, k, ...emptySts]);\n    const nextRowID = i < decRows.length - 1 ? decRows[i + 1] : cuffDecRow;\n    for (let j = decRow + 1; j < nextRowID; j++) {\n      const row = baseChart[j];\n      spliceRow(row, 0, emptyCount);\n      spliceRow(row, null, emptyCount);\n    }\n  });\n  const cuffDecStsList = getDec1StsIDList(\n    schema.total.sleeve - decRows.length * 2,\n    cuffSts\n  );\n\n  // Cuff sts decrease\n  const baseRow = baseChart[cuffDecRow - 1];\n  const baseRowSts = getRawStsFromBaseRow(baseRow);\n  spliceRow(\n    baseRow,\n    0,\n    baseRow.length,\n    baseRowSts.map((s) => definition[s])\n  );\n  cuffDecStsList.forEach((decStsID, i) => {\n    const stsID = decStsID + decRows.length;\n    spliceRow(baseRow, stsID, 2, [k2tog, empty]);\n  });\n\n  return { ...basePattern, baseChart };\n}\n","import {\n  MotifColor,\n  MotifComponent,\n  PlainTextList,\n  SectionInstruction,\n  getBasePatternFromChart,\n  getChartFromBasePattern,\n  getEven,\n  getMergedBasePattern,\n  getMotifFilledChart,\n  getRound,\n  getSlicedBasePattern,\n} from \"@tanyoknits/shared\";\nimport PageContentWrapper from \"../../layout/PageContentWrapper\";\nimport { PatternBySizeProps } from \"../../layout/PatternBySize\";\nimport { repeatedPattern } from \"./motifs\";\nimport { schemaBySize } from \"./sizes\";\nimport {\n  getBodyStartBasePattern,\n  getSleeveBasePattern,\n  getYokeBasePatternByParts,\n  topDownVNeckRaglanOverview as overview,\n} from \"../../patternMakers/cardigan\";\nimport InteractivePattern from \"../../components/InteractivePattern\";\nimport { getNeedleText, needles } from \"../../utils/needles\";\n\nexport default function Instruction({ menu, size }: PatternBySizeProps) {\n  const repeat = repeatedPattern[size];\n  const schema = schemaBySize[size];\n  const { co, start, rows, yokeSplit, total, vNeck, arm } = schema;\n  const { every4RowAfterRaglan } = vNeck;\n  const { hemDecStart, lastNeckInc, split, bo } = rows;\n  const { body, sleeve } = total;\n  const { frontOneSide, underarm } = yokeSplit;\n  const { cuffDecRow, cuffBO } = arm;\n\n  // Full body part including all increase sts till hem decrease - excluding sleeves\n  const fullBodyChart = getMotifFilledChart(repeat, body, hemDecStart, 3);\n  const motifRepeatRow = repeat.length;\n  const combinedMotif = {\n    id: \"grape\" as MotifColor,\n    stsCount: 4,\n    rowCount: motifRepeatRow,\n  };\n  const fullBodyBasePattern = getBasePatternFromChart(\n    fullBodyChart,\n    null,\n    0,\n    combinedMotif\n  );\n  // full body parts\n  const frontLeftBasePattern = getSlicedBasePattern(\n    fullBodyBasePattern,\n    [0, lastNeckInc],\n    [0, frontOneSide + every4RowAfterRaglan]\n  );\n  const frontRightBasePattern = getSlicedBasePattern(\n    fullBodyBasePattern,\n    [0, lastNeckInc],\n    [body - (frontOneSide + every4RowAfterRaglan), body]\n  );\n  const backBasePattern = getSlicedBasePattern(\n    fullBodyBasePattern,\n    [0, split],\n    [\n      frontOneSide + every4RowAfterRaglan + underarm,\n      body - (frontOneSide + every4RowAfterRaglan + underarm),\n    ]\n  );\n\n  // Sleeve - include yoke & after split\n  const fullSleeveChart = getMotifFilledChart(\n    repeat,\n    sleeve,\n    split + cuffDecRow,\n    3\n  );\n  const sleeveBasePattern = getBasePatternFromChart(\n    fullSleeveChart,\n    null,\n    0,\n    combinedMotif\n  );\n  const sleeveYokeBasePattern = getSlicedBasePattern(\n    sleeveBasePattern,\n    [0, split],\n    [underarm / 2, sleeve - underarm / 2]\n  );\n\n  /** pattern parts */\n\n  // Total yoke base patterns\n  const yokeBasePatterns = getYokeBasePatternByParts(\n    frontLeftBasePattern,\n    frontRightBasePattern,\n    backBasePattern,\n    sleeveYokeBasePattern,\n    schema\n  );\n  // Yoke\n  const yorkPartBasePattern = getMergedBasePattern(\n    yokeBasePatterns,\n    split - 1,\n    [\"A\", \"B\", \"C\", \"D\"]\n  );\n\n  // Total body\n  const frontLeftInc = getSlicedBasePattern(\n    yokeBasePatterns[0],\n    [split - 1, lastNeckInc],\n    [0, null]\n  );\n  const backWithUnderArm = getSlicedBasePattern(\n    fullBodyBasePattern,\n    [split - 1, lastNeckInc],\n    [\n      frontOneSide + every4RowAfterRaglan,\n      body - (frontOneSide + every4RowAfterRaglan),\n    ]\n  );\n  const frontRightInc = getSlicedBasePattern(\n    yokeBasePatterns[yokeBasePatterns.length - 1],\n    [split - 1, lastNeckInc],\n    [0, null]\n  );\n  const bodyStartBasePattern = getBodyStartBasePattern(\n    frontLeftInc,\n    backWithUnderArm,\n    frontRightInc,\n    underarm\n  );\n\n  // body hem\n  const hemDec = getEven(body * 0.1);\n  const boSts = body - hemDec * 2;\n\n  // sleeve pattern\n  const sleeveFromUnderarmBasePattern = getSleeveBasePattern(\n    sleeveBasePattern,\n    schema\n  );\n\n  // overview\n  const { sleeve: startS, back: startB, frontOneSide: startF } = start;\n  const initPMs = [\n    `PM twice at ${startF} sts from each end to indicate the divide between front and sleeve`,\n    `PM twice at ${startS} sts from the previous markers to indicate the divide between sleeve and back`,\n    `From the start, let's call marker A, B, C, D; back is between marker B and C and it has ${startB} sts`,\n    `Work two rows, then work the following chart for the yoke`,\n  ];\n\n  return (\n    <PageContentWrapper>\n      {menu === 0 && (\n        <>\n          <PlainTextList list={overview} />\n          <MotifComponent chart={repeat} stsCount={20} />\n        </>\n      )}\n      {menu === 1 && (\n        <InteractivePattern\n          chart={{\n            chart: getChartFromBasePattern(yorkPartBasePattern),\n            size: \"S\",\n            direction: \"flat\",\n            showStsCountPerRow: true,\n            stsMarkers: yorkPartBasePattern.stsMarkers,\n          }}\n          instruction={{\n            co: {\n              needle: getNeedleText(needles[6]),\n              coCount: co,\n              direction: \"flat\",\n            },\n            beforeList: initPMs,\n          }}\n        />\n      )}\n      {menu === 2 && (\n        <>\n          <SectionInstruction\n            title=\"Body & sleeves split\"\n            rowType={`Rnd ${split} + CO`}\n            rows={[\n              {\n                text: `Work till mA, slip sts in scrap yarn or stitch holder till mB, CO ${underarm} with KOCO method, work till mC, slip sleeve sts till mD, CO ${underarm}, work till end`,\n                notes: `total ${body - every4RowAfterRaglan * 2} sts`,\n              },\n            ]}\n            afterList={[\n              \"Follow by final V neck increase as in the chart below\",\n              `Work with the stitch pattern until row ${hemDecStart} or a desired length before hem`,\n            ]}\n          />\n          <InteractivePattern\n            chart={{\n              chart: getChartFromBasePattern(bodyStartBasePattern),\n              size: \"S\",\n              direction: \"flat\",\n              showStsCountPerRow: true,\n              startRowID: split - 1,\n            }}\n          />\n          <SectionInstruction\n            title=\"Waistline dec\"\n            rowType={`Rnd ${hemDecStart}`}\n            rows={[\n              {\n                text: `Dec evenly about 10%, ${hemDec} sts`,\n                notes: `total ${boSts} sts`,\n              },\n            ]}\n          />\n          <SectionInstruction\n            title=\"Hem ribbing\"\n            rowType={`Rnd ${hemDecStart + 1}`}\n            rows={[\n              {\n                text: `(k1, p1), rep (-) to end (${boSts / 2} times)`,\n              },\n              { text: \"as rnd 1\" },\n            ]}\n            notes={`Work in ribbing till row ${bo}. BO with Sewn-on BO is recommended.`}\n          />\n        </>\n      )}\n      {menu === 3 && (\n        <>\n          <SectionInstruction\n            intro=\"🪡 Move the sts in scrap yarn or stitch holder the larger circular needle.\"\n            rowType=\"Pick up\"\n            rows={[\n              {\n                text: `underarm ${underarm} sts`,\n                notes: `sleeve total ${sleeve} sts`,\n              },\n            ]}\n            afterList={[\n              `Pm after ${getRound(\n                underarm / 2\n              )} sts - this is BOR of sleeve. Rnd 1 start here.`,\n              `Work about ${cuffDecRow} rows before cuff.`,\n              `Work sleeve tapering as in the chart below, and dec evenly about before cuff ribs`,\n            ]}\n          />\n          <InteractivePattern\n            chart={{\n              chart: getChartFromBasePattern(sleeveFromUnderarmBasePattern),\n              size: \"S\",\n              direction: \"round\",\n              showStsCountPerRow: true,\n            }}\n          />\n          <SectionInstruction\n            title=\"Hem 1x1 ribbing\"\n            rowType=\"Rnd\"\n            startRowID={cuffDecRow + 1}\n            rows={[{ text: `(k1, p1) repeat (-) till BOR` }]}\n            notes={`Rep the prev row to about ${\n              cuffBO - cuffDecRow\n            } rows before cuff BO. Sewn-on BO is recommended.`}\n          />\n        </>\n      )}\n    </PageContentWrapper>\n  );\n}\n","/** Motif repeats on Overview page */\n\nimport {\n  Chart,\n  Motif,\n  MotifColor,\n  getChartFromText,\n  getFlattenRow,\n  getMergedChart,\n  getRightLeftFlippedChart,\n  getVerticalStackedChart,\n} from \"@tanyoknits/shared\";\nimport { cable, twistLace } from \"./stitches\";\nimport { sizes } from \"./sizes\";\nimport { getMotifBySize } from \"../../utils/misc\";\n\nconst gutters = sizes.map((_) => getChartFromText([\"p k:2 p\"]));\nconst halfGutters = sizes.map((_) => getChartFromText([\"k p\"]));\n\nconst motifColor: MotifColor[] = [\"orange\", \"teal\"];\n\nexport const repeatedPattern: Chart[] = sizes.map((size, i) => {\n  const cableMotif = { ...getMotifBySize(cable, size), id: motifColor[0] };\n  const cablePadding: Motif = {\n    chart: getChartFromText([\"k:4\"]),\n    stsCount: 4,\n    id: motifColor[0],\n  };\n  const laceMotifBySize = getMotifBySize(twistLace, size);\n  const flattedLaceChart = laceMotifBySize.chart.map((row) =>\n    getFlattenRow(row)\n  );\n  const laceMotif = {\n    ...getMotifBySize(twistLace, size),\n    chart: flattedLaceChart,\n    id: motifColor[1],\n  };\n  const lacePadding: Motif = {\n    chart: getChartFromText([\"p k2tog yo p\", \"k:4\"]).map((row) =>\n      getFlattenRow(row)\n    ),\n    stsCount: 4,\n    id: motifColor[1],\n  };\n\n  const chart1 = getVerticalStackedChart(\n    [\n      cableMotif,\n      cableMotif,\n      cablePadding,\n      cablePadding,\n      laceMotif,\n      laceMotif,\n      lacePadding,\n    ],\n    true\n  );\n\n  const chart2 = getVerticalStackedChart(\n    [\n      laceMotif,\n      laceMotif,\n      lacePadding,\n      cableMotif,\n      cableMotif,\n      cablePadding,\n      cablePadding,\n    ],\n    true\n  );\n\n  return getMergedChart(\n    [\n      halfGutters[i],\n      chart1,\n      gutters[i],\n      chart2,\n      getRightLeftFlippedChart(halfGutters[i]),\n    ],\n    20\n  );\n});\n","import { needles } from \"../../utils/needles\";\nimport { ProjectProfile } from \"../../utils/types\";\n\nconst profile: ProjectProfile = {\n  yarn: {\n    maker: \"Lana Grossa\",\n    line: \"Puno Luce\",\n    color: \"White\",\n    url: \"https://www.lana-grossa.de/en/yarns/detail/puno-luce/1123/\",\n    shape: \"ball\",\n    yards: 273,\n    grams: 50,\n  },\n  needles: [\n    {\n      type: \"circular\",\n      size: needles[7],\n      usage: \"Body\",\n    },\n    { type: \"circular\", size: needles[5], usage: \"Bands\" },\n  ],\n  gauge: {\n    sts: \"Stockinette stitch\",\n    sts_count: 26,\n    row_count: 36,\n    needle: needles[7],\n  },\n  notions: [\"Cable Needle\", \"Tapestry needle\", \"Stitch markers\"],\n  difficulty: \"Intermediate\",\n  photoCount: 0,\n};\n\nexport default profile;\n","import { IntroSizing } from \"../../utils/types\";\nimport {\n  Size,\n  baseBodySizing,\n  FOMeasurement,\n  raglanCoreParts,\n  RaglanMeasurement,\n  CustomizedFO,\n} from \"../../utils/sizeBase\";\nimport profile from \"./profile\";\nimport { getFOMeasurementBySize, getIntroSizingInfo } from \"../../utils/misc\";\nimport {\n  VNeckCardiganPattern,\n  getVNeckPatternSchema,\n} from \"../../patternMakers/cardigan\";\n\n// Size list\nexport const sizes: Size[] = [\"M\"];\n\nconst customizedSize: CustomizedFO = {\n  neck_circumference: [21.7],\n  neck_depth: [1],\n  bust_circumference: [41.04],\n  under_arm_circumference: [16.52],\n  wrist_circumference: [10.4],\n  total_length: [24],\n  sleeve_length_from_underarm: [17.5],\n  underarm: [41.04 / 20],\n  yoke_length: [9.25],\n  neck_band_height: [1],\n  arm_band_height: [1],\n  hem: [2],\n};\n\nexport const measurements: FOMeasurement[] = getFOMeasurementBySize(\n  sizes,\n  raglanCoreParts,\n  customizedSize\n);\n\nexport const schemaBySize: VNeckCardiganPattern[] = measurements.map((m, i) => {\n  return getVNeckPatternSchema(\n    profile.gauge.sts_count,\n    profile.gauge.row_count,\n    m as RaglanMeasurement\n  );\n});\n\nexport const introSizing: IntroSizing = getIntroSizingInfo(\n  sizes,\n  baseBodySizing,\n  measurements,\n  schemaBySize.map((schema) => schema.totalSts),\n  [\"bust\"],\n  [\n    \"bust_circumference\",\n    \"neck_circumference\",\n    \"under_arm_circumference\",\n    \"sleeve_length_from_underarm\",\n    \"total_length\",\n  ]\n);\n","import {\n  Abbr,\n  Techniques,\n  definition,\n  getBasicCableMotif,\n  getChartFromText,\n  techniques,\n} from \"@tanyoknits/shared\";\nimport { MotifBySizeItem, PageInfo } from \"../../utils/types\";\nimport { sizes } from \"./sizes\";\nimport StitchPattern from \"../../components/StitchPattern\";\n\n// Stitches in charts\nconst { m1l } = definition;\n\nexport const cable: MotifBySizeItem[] = [\n  {\n    sizes,\n    motif: getBasicCableMotif(4, 4, \"left\", 2),\n  },\n];\n\nexport const twistLace: MotifBySizeItem[] = [\n  {\n    sizes,\n    motif: {\n      chart: getChartFromText([\n        \"p k2tog yo p \",\n        \"p k:2 p\",\n        \"p yo ssk p\",\n        \"p k:2 p\",\n      ]),\n      stsCount: 4,\n    },\n  },\n];\n\n// Combined chart\n\nconst usedTechniques: {\n  title: string;\n  desc: string;\n  video: string | undefined;\n}[] = [\n  {\n    title: \"Cable CO\",\n    desc: \"Used for neckline CO\",\n    video: \"https://www.youtube.com/watch?v=4YUfdREnSQI\",\n  },\n  {\n    title: \"m1l & m1r\",\n    desc: \"Make 1 left/right, used for arm inset increase\",\n    video: m1l.videos?.[0].url,\n  },\n  {\n    title: \"w & t\",\n    desc: \"Wrap & turn; short row technique, my preference is German short row. \",\n    video: techniques[\"Wrap & Turn\"]?.videos?.[0].url,\n  },\n  {\n    title: \"Sewn on BO\",\n    desc: \"Or tubular BO\",\n    video: techniques[\"Tubular BO\"]?.videos[0].url,\n  },\n];\n\nconst stitchPage: PageInfo[] = [\n  {\n    id: \"cable\",\n    label: \"Cable\",\n    component: <StitchPattern motifBySize={cable} />,\n  },\n  {\n    id: \"lace\",\n    label: \"Lace\",\n    component: <StitchPattern motifBySize={twistLace} />,\n  },\n  {\n    id: \"techniques\",\n    label: \"Techniques\",\n    component: <Techniques list={usedTechniques} />,\n  },\n  {\n    id: \"abbr\",\n    label: \"Abbreviations\",\n    component: (\n      <Abbr\n        list={[\"CO\", \"BO\", \"cont\", \"inc\", \"dec\", \"rep\", \"RS\", \"SR\", \"WS\", \"pu\"]}\n      />\n    ),\n  },\n];\n\nexport default stitchPage;\n"],"names":["COInstruction","_ref","needle","method","direction","coCount","_jsx","SectionInstruction","intro","concat","rows","text","rowType","afterList","InteractiveAlert","_ref$isRow","isRow","_jsxs","Alert","width","children","AlertIcon","InteractivePattern","chart","instruction","_useState","useState","_useState2","_slicedToArray","menu","setMenu","_useState3","_useState4","focus","setFocus","Flex","gap","co","_objectSpread","beforeList","PlainTextList","list","DisplayOptions","options","_Fragment","Box","overflow","ChartComponent","isOnlyRowClickable","Written","display","StitchPattern","_motifBySize$selected","motifBySize","showReflected","selectedSize","setSelectedSize","_ref2","motif","stitches","getUniqueStsFromChart","Text","VStack","spacing","align","alignItems","flexWrap","length","SelectSize","sizes","map","m","join","onChange","id","MotifComponent","StitchList","hasWS","PageContentWrapper","mb","pt","k","definition","rli","lli","m1r","m1l","sr_rs","sr_ws","empty","koco","k2tog","ssk","topDownVNeckRaglanOverview","getVNeckPatternSchema","stsPer4Inch","rowPer4Inch","measurement","sleeveAdj","arguments","undefined","cuffRatio","stsGauge","rowGauge","totalNeck","neck_circumference","totalEachSleeve","under_arm_circumference","underarm","sleeveYorkEnd","bodyYorkEnd","bust_circumference","totalYork","yoke_length","totalYorkEnd","yokeBase","getRound","totalInc8","start","sleeve","getEven","back","frontOneSide","every2Rows","Math","round","every4Rows","frontIncSkip","neck_depth","raglan","buttonBandSts","neck_band_height","frontSts","ragIncRowEnd","every4RowWithRaglan","ceil","every4RowAfterRaglan","yokeSplitBack","yokeSplitFrontOneSide","yokeSplit","body","endBody","total","bodyBeforeVInc","every4RowIncStart","splitRow","afterRaglanIncStart","hemRow","hem","hemDecStart","total_length","cuffRow","cuff_length","cuffSts","wrist_circumference","decOffset","sleeveRow","sleeve_length_from_underarm","beforeCuffSts","decAvailableRow","taperDecTimes","decRows","getSleeveDecRows","cuffDecSts","cuffDecRow","cuffBO","vNeck","every2RowIncStart","split","lastNeckInc","bo","arm","totalSts","getYokeBasePatternByParts","leftBasePattern","rightBasePattern","backBasePattern","yokeBasePattern","schema","leftBaseChart","baseChart","rightBaseChart","backBaseChart","leftSleeveYokeBaseChart","_toConsumableArray","row","rightSleeveYokeBaseChart","stsCount","vNeckInc","raglanInc","i","spliceRow","getLineSRCount","slice","forEach","count","Array","fill","baseRowID","emptyCount","emptySts","k2","j","leftRow","rightRow","increaseRaglan","everyXRows","times","startEmptyCount","startRowID","side","lb","rb","ls","rs","bb","parts","getBodyStartBasePattern","frontLeft","frontRight","coRow","getMergedBasePattern","getSleeveBasePattern","basePattern","_schema$arm","decRow","baseRow","nextRowID","cuffDecStsList","getDec1StsIDList","baseRowSts","getRawStsFromBaseRow","s","decStsID","stsID","Instruction","size","repeat","repeatedPattern","schemaBySize","fullBodyChart","getMotifFilledChart","combinedMotif","rowCount","fullBodyBasePattern","getBasePatternFromChart","frontLeftBasePattern","getSlicedBasePattern","frontRightBasePattern","fullSleeveChart","sleeveBasePattern","sleeveYokeBasePattern","yokeBasePatterns","yorkPartBasePattern","frontLeftInc","backWithUnderArm","frontRightInc","bodyStartBasePattern","hemDec","boSts","sleeveFromUnderarmBasePattern","startS","startB","startF","initPMs","overview","getChartFromBasePattern","showStsCountPerRow","stsMarkers","getNeedleText","needles","title","notes","gutters","_","getChartFromText","halfGutters","motifColor","cableMotif","getMotifBySize","cable","cablePadding","flattedLaceChart","twistLace","getFlattenRow","laceMotif","lacePadding","chart1","getVerticalStackedChart","chart2","getMergedChart","getRightLeftFlippedChart","profile","yarn","maker","line","color","url","shape","yards","grams","type","usage","gauge","sts","sts_count","row_count","notions","difficulty","photoCount","measurements","getFOMeasurementBySize","raglanCoreParts","arm_band_height","introSizing","getIntroSizingInfo","baseBodySizing","getBasicCableMotif","usedTechniques","desc","video","_m1l$videos","videos","_techniques$WrapTu","techniques","_techniques$WrapTu$vi","_techniques$TubularB","stitchPage","label","component","Techniques","Abbr"],"sourceRoot":""}