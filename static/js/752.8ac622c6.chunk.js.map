{"version":3,"file":"static/js/752.8ac622c6.chunk.js","mappings":"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","sources":["components/COInstruction.tsx","components/InteractiveAlert.tsx","components/InteractivePattern.tsx","components/StitchPattern.tsx","layout/PageContentWrapper.tsx","projects/salvia-cardigan/Instruction.tsx","projects/salvia-cardigan/motifs.ts","projects/salvia-cardigan/stitches.tsx"],"sourcesContent":["import SectionInstruction from \"@tanyoknits/shared/src/components/SectionInstruction\";\nimport { COProps } from \"../utils/types\";\n\nexport default function COInstruction({\n  needle,\n  method,\n  direction,\n  coCount,\n}: COProps) {\n  return (\n    <SectionInstruction\n      intro={`ðŸª¡ With a ${needle} needle${\n        method != null ? ` using ${method} method` : \"\"\n      }`}\n      rows={[\n        {\n          text: `CO ${coCount} ${\n            direction === \"round\" ? \"in the rnd\" : \"flat\"\n          }`,\n        },\n      ]}\n      rowType={\"CO\"}\n      afterList={\n        direction === \"round\"\n          ? [\"Pm at the end to indicate BOR (middle back)\"]\n          : []\n      }\n    />\n  );\n}\n","import { Alert, AlertIcon } from \"@chakra-ui/react\";\n\ninterface Props {\n  isRow?: boolean;\n}\n\nexport default function InteractiveAlert({ isRow = false }: Props) {\n  return (\n    <Alert width=\"fit-content\">\n      <AlertIcon />\n      Chart is interactive - click a {isRow ? \"row\" : \"stitch group\"} to see the\n      corresponding written instruction.\n    </Alert>\n  );\n}\n","import { Box, Flex } from \"@chakra-ui/react\";\nimport { useState } from \"react\";\nimport DisplayOptions from \"./DisplayOptions\";\nimport {\n  ChartComponent,\n  ChartProps,\n  FocusType,\n  PlainTextList,\n  Written,\n} from \"@tanyoknits/shared\";\nimport { PatternPartInstruction } from \"../utils/types\";\nimport COInstruction from \"./COInstruction\";\nimport InteractiveAlert from \"./InteractiveAlert\";\n\ninterface Props {\n  chart: ChartProps;\n  instruction?: PatternPartInstruction;\n}\n\nexport default function InteractivePattern({ chart, instruction }: Props) {\n  const [menu, setMenu] = useState<string>(\"1\");\n  const [focus, setFocus] = useState<FocusType>([0, null]);\n\n  return (\n    <Flex direction=\"column\" gap={4}>\n      {instruction?.co != null && <COInstruction {...instruction?.co} />}\n      {instruction?.beforeList != null && (\n        <PlainTextList list={instruction?.beforeList} />\n      )}\n      <DisplayOptions\n        menu={menu}\n        setMenu={setMenu}\n        options={[\"Chart\", \"Inline (text)\", \"Split by motif (text)\"]}\n      />\n      {menu === \"1\" && (\n        <>\n          <InteractiveAlert isRow={true} />\n          <Box width=\"100%\" overflow=\"auto\">\n            <ChartComponent\n              {...chart}\n              focus={focus}\n              setFocus={setFocus}\n              isOnlyRowClickable={true}\n            />\n          </Box>\n        </>\n      )}\n      {menu === \"2\" && <Written {...chart} />}\n      {menu === \"3\" && <Written {...chart} display=\"block\" />}\n      {instruction?.afterList != null && (\n        <PlainTextList list={instruction?.afterList} />\n      )}\n    </Flex>\n  );\n}\n","import { Flex, Text, VStack } from \"@chakra-ui/react\";\nimport { MotifBySizeItem } from \"../utils/types\";\nimport { useState } from \"react\";\nimport {\n  MotifComponent,\n  StitchList,\n  getUniqueStsFromChart,\n} from \"@tanyoknits/shared\";\nimport SelectSize from \"./SelectSize\";\nimport InteractiveAlert from \"./InteractiveAlert\";\ninterface Props {\n  intro?: string;\n  motifBySize: MotifBySizeItem[];\n  showReflected?: boolean;\n}\nexport default function StitchPattern({\n  intro,\n  motifBySize,\n  showReflected = false,\n}: Props) {\n  const [selectedSize, setSelectedSize] = useState<number>(0);\n  const { motif, direction } = motifBySize[selectedSize] ?? motifBySize[0];\n  const stitches = getUniqueStsFromChart(motif.chart);\n\n  return (\n    <Flex direction=\"column\" gap={6}>\n      {intro != null && <Text>{intro}</Text>}\n      <VStack spacing={6} align=\"left\">\n        <Flex gap={6} alignItems=\"center\" flexWrap=\"wrap\">\n          {motifBySize.length > 1 && (\n            <SelectSize\n              sizes={motifBySize.map((m) => m.sizes.join(\", \"))}\n              selectedSize={selectedSize}\n              onChange={(id: number) => setSelectedSize(id)}\n            />\n          )}\n          <InteractiveAlert />\n        </Flex>\n        <MotifComponent {...motif} direction={direction} />\n        <StitchList stitches={stitches} hasWS={true} />\n      </VStack>\n    </Flex>\n  );\n}\n","import { Flex } from \"@chakra-ui/react\";\n\nexport default function PageContentWrapper({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <Flex direction=\"column\" gap={8} mb={2} pt={2}>\n      {children}\n    </Flex>\n  );\n}\n","import {\n  MotifColor,\n  MotifComponent,\n  PlainTextList,\n  SectionInstruction,\n  getBasePatternFromChart,\n  getChartFromBasePattern,\n  getEven,\n  getMergedBasePattern,\n  getMotifFilledChart,\n  getRound,\n  getSlicedBasePattern,\n} from \"@tanyoknits/shared\";\nimport PageContentWrapper from \"../../layout/PageContentWrapper\";\nimport { PatternBySizeProps } from \"../../layout/PatternBySize\";\nimport { repeatedPattern } from \"./motifs\";\nimport { schemaBySize } from \"./sizes\";\nimport {\n  getBodyStartBasePattern,\n  getSleeveBasePattern,\n  getYokeBasePatternByParts,\n  topDownVNeckRaglanOverview as overview,\n} from \"../../patternMakers/cardigan\";\nimport InteractivePattern from \"../../components/InteractivePattern\";\nimport { getNeedleText, needles } from \"../../utils/needles\";\n\nexport default function Instruction({ menu, size }: PatternBySizeProps) {\n  const repeat = repeatedPattern[size];\n  const schema = schemaBySize[size];\n  const { co, start, rows, yokeSplit, total, vNeck, arm } = schema;\n  const { every4RowAfterRaglan } = vNeck;\n  const { hemDecStart, lastNeckInc, split, bo } = rows;\n  const { body, sleeve } = total;\n  const { frontOneSide, underarm } = yokeSplit;\n  const { cuffDecRow, cuffBO } = arm;\n\n  // Full body part including all increase sts till hem decrease - excluding sleeves\n  const fullBodyChart = getMotifFilledChart(repeat, body, hemDecStart, 3);\n  const motifRepeatRow = repeat.length;\n  const combinedMotif = {\n    id: \"grape\" as MotifColor,\n    stsCount: 4,\n    rowCount: motifRepeatRow,\n  };\n  const fullBodyBasePattern = getBasePatternFromChart(\n    fullBodyChart,\n    null,\n    0,\n    combinedMotif\n  );\n  // full body parts\n  const frontLeftBasePattern = getSlicedBasePattern(\n    fullBodyBasePattern,\n    [0, lastNeckInc],\n    [0, frontOneSide + every4RowAfterRaglan]\n  );\n  const frontRightBasePattern = getSlicedBasePattern(\n    fullBodyBasePattern,\n    [0, lastNeckInc],\n    [body - (frontOneSide + every4RowAfterRaglan), body]\n  );\n  const backBasePattern = getSlicedBasePattern(\n    fullBodyBasePattern,\n    [0, split],\n    [\n      frontOneSide + every4RowAfterRaglan + underarm,\n      body - (frontOneSide + every4RowAfterRaglan + underarm),\n    ]\n  );\n\n  // Sleeve - include yoke & after split\n  const fullSleeveChart = getMotifFilledChart(\n    repeat,\n    sleeve,\n    split + cuffDecRow,\n    3\n  );\n  const sleeveBasePattern = getBasePatternFromChart(\n    fullSleeveChart,\n    null,\n    0,\n    combinedMotif\n  );\n  const sleeveYokeBasePattern = getSlicedBasePattern(\n    sleeveBasePattern,\n    [0, split],\n    [underarm / 2, sleeve - underarm / 2]\n  );\n\n  /** pattern parts */\n\n  // Total yoke base patterns\n  const yokeBasePatterns = getYokeBasePatternByParts(\n    frontLeftBasePattern,\n    frontRightBasePattern,\n    backBasePattern,\n    sleeveYokeBasePattern,\n    schema\n  );\n  // Yoke\n  const yorkPartBasePattern = getMergedBasePattern(\n    yokeBasePatterns,\n    split - 1,\n    [\"A\", \"B\", \"C\", \"D\"]\n  );\n\n  // Total body\n  const frontLeftInc = getSlicedBasePattern(\n    yokeBasePatterns[0],\n    [split - 1, lastNeckInc],\n    [0, null]\n  );\n  const backWithUnderArm = getSlicedBasePattern(\n    fullBodyBasePattern,\n    [split - 1, lastNeckInc],\n    [\n      frontOneSide + every4RowAfterRaglan,\n      body - (frontOneSide + every4RowAfterRaglan),\n    ]\n  );\n  const frontRightInc = getSlicedBasePattern(\n    yokeBasePatterns[yokeBasePatterns.length - 1],\n    [split - 1, lastNeckInc],\n    [0, null]\n  );\n  const bodyStartBasePattern = getBodyStartBasePattern(\n    frontLeftInc,\n    backWithUnderArm,\n    frontRightInc,\n    underarm\n  );\n\n  // body hem\n  const hemDec = getEven(body * 0.1);\n  const boSts = body - hemDec * 2;\n\n  // sleeve pattern\n  const sleeveFromUnderarmBasePattern = getSleeveBasePattern(\n    sleeveBasePattern,\n    schema\n  );\n\n  // overview\n  const { sleeve: startS, back: startB, frontOneSide: startF } = start;\n  const initPMs = [\n    `PM twice at ${startF} sts from each end to indicate the divide between front and sleeve`,\n    `PM twice at ${startS} sts from the previous markers to indicate the divide between sleeve and back`,\n    `From the start, let's call marker A, B, C, D; back is between marker B and C and it has ${startB} sts`,\n    `Work two rows, then work the following chart for the yoke`,\n  ];\n\n  return (\n    <PageContentWrapper>\n      {menu === 0 && (\n        <>\n          <PlainTextList list={overview} />\n          <MotifComponent chart={repeat} stsCount={20} />\n        </>\n      )}\n      {menu === 1 && (\n        <InteractivePattern\n          chart={{\n            chart: getChartFromBasePattern(yorkPartBasePattern),\n            size: \"S\",\n            direction: \"flat\",\n            showStsCountPerRow: true,\n            stsMarkers: yorkPartBasePattern.stsMarkers,\n          }}\n          instruction={{\n            co: {\n              needle: getNeedleText(needles[6]),\n              coCount: co,\n              direction: \"flat\",\n            },\n            beforeList: initPMs,\n          }}\n        />\n      )}\n      {menu === 2 && (\n        <>\n          <SectionInstruction\n            title=\"Body & sleeves split\"\n            rowType={`Rnd ${split} + CO`}\n            rows={[\n              {\n                text: `Work till mA, slip sts in scrap yarn or stitch holder till mB, CO ${underarm} with KOCO method, work till mC, slip sleeve sts till mD, CO ${underarm}, work till end`,\n                notes: `total ${body - every4RowAfterRaglan * 2} sts`,\n              },\n            ]}\n            afterList={[\n              \"Follow by final V neck increase as in the chart below\",\n              `Work with the stitch pattern until row ${hemDecStart} or a desired length before hem`,\n            ]}\n          />\n          <InteractivePattern\n            chart={{\n              chart: getChartFromBasePattern(bodyStartBasePattern),\n              size: \"S\",\n              direction: \"flat\",\n              showStsCountPerRow: true,\n              startRowID: split - 1,\n            }}\n          />\n          <SectionInstruction\n            title=\"Waistline dec\"\n            rowType={`Rnd ${hemDecStart}`}\n            rows={[\n              {\n                text: `Dec evenly about 10%, ${hemDec} sts`,\n                notes: `total ${boSts} sts`,\n              },\n            ]}\n          />\n          <SectionInstruction\n            title=\"Hem ribbing\"\n            rowType={`Rnd ${hemDecStart + 1}`}\n            rows={[\n              {\n                text: `(k1, p1), rep (-) to end (${boSts / 2} times)`,\n              },\n              { text: \"as rnd 1\" },\n            ]}\n            notes={`Work in ribbing till row ${bo}. BO with Sewn-on BO is recommended.`}\n          />\n        </>\n      )}\n      {menu === 3 && (\n        <>\n          <SectionInstruction\n            intro=\"ðŸª¡ Move the sts in scrap yarn or stitch holder the larger circular needle.\"\n            rowType=\"Pick up\"\n            rows={[\n              {\n                text: `underarm ${underarm} sts`,\n                notes: `sleeve total ${sleeve} sts`,\n              },\n            ]}\n            afterList={[\n              `Pm after ${getRound(\n                underarm / 2\n              )} sts - this is BOR of sleeve. Rnd 1 start here.`,\n              `Work about ${cuffDecRow} rows before cuff.`,\n              `Work sleeve tapering as in the chart below, and dec evenly about before cuff ribs`,\n            ]}\n          />\n          <InteractivePattern\n            chart={{\n              chart: getChartFromBasePattern(sleeveFromUnderarmBasePattern),\n              size: \"S\",\n              direction: \"round\",\n              showStsCountPerRow: true,\n              startRowID: split - 1,\n            }}\n          />\n          <SectionInstruction\n            title=\"Hem 1x1 ribbing\"\n            rowType=\"Rnd\"\n            startRowID={cuffDecRow + 1}\n            rows={[{ text: `(k1, p1) repeat (-) till BOR` }]}\n            notes={`Rep the prev row to about ${\n              cuffBO - cuffDecRow\n            } rows before cuff BO. Sewn-on BO is recommended.`}\n          />\n        </>\n      )}\n    </PageContentWrapper>\n  );\n}\n","/** Motif repeats on Overview page */\n\nimport {\n  Chart,\n  Motif,\n  MotifColor,\n  getChartFromText,\n  getFlattenRow,\n  getMergedChart,\n  getRightLeftFlippedChart,\n  getVerticalStackedChart,\n} from \"@tanyoknits/shared\";\nimport { cable, twistLace } from \"./stitches\";\nimport { sizes } from \"./sizes\";\nimport { getMotifBySize } from \"../../utils/misc\";\n\nconst gutters = sizes.map((_) => getChartFromText([\"p k:2 p\"]));\nconst halfGutters = sizes.map((_) => getChartFromText([\"k p\"]));\n\nconst motifColor: MotifColor[] = [\"orange\", \"teal\"];\n\nexport const repeatedPattern: Chart[] = sizes.map((size, i) => {\n  const cableMotif = { ...getMotifBySize(cable, size), id: motifColor[0] };\n  const cablePadding: Motif = {\n    chart: getChartFromText([\"k:4\"]),\n    stsCount: 4,\n    id: motifColor[0],\n  };\n  const laceMotifBySize = getMotifBySize(twistLace, size);\n  const flattedLaceChart = laceMotifBySize.chart.map((row) =>\n    getFlattenRow(row)\n  );\n  const laceMotif = {\n    ...getMotifBySize(twistLace, size),\n    chart: flattedLaceChart,\n    id: motifColor[1],\n  };\n  const lacePadding: Motif = {\n    chart: getChartFromText([\"p k2tog yo p\", \"k:4\"]).map((row) =>\n      getFlattenRow(row)\n    ),\n    stsCount: 4,\n    id: motifColor[1],\n  };\n\n  const chart1 = getVerticalStackedChart(\n    [\n      cableMotif,\n      cableMotif,\n      cablePadding,\n      cablePadding,\n      laceMotif,\n      laceMotif,\n      lacePadding,\n    ],\n    true\n  );\n\n  const chart2 = getVerticalStackedChart(\n    [\n      laceMotif,\n      laceMotif,\n      lacePadding,\n      cableMotif,\n      cableMotif,\n      cablePadding,\n      cablePadding,\n    ],\n    true\n  );\n\n  return getMergedChart(\n    [\n      halfGutters[i],\n      chart1,\n      gutters[i],\n      chart2,\n      getRightLeftFlippedChart(halfGutters[i]),\n    ],\n    20\n  );\n});\n","import {\n  Abbr,\n  Techniques,\n  definition,\n  getBasicCableMotif,\n  getChartFromText,\n  techniques,\n} from \"@tanyoknits/shared\";\nimport { MotifBySizeItem, PageInfo } from \"../../utils/types\";\nimport { sizes } from \"./sizes\";\nimport StitchPattern from \"../../components/StitchPattern\";\n\n// Stitches in charts\nconst { m1l } = definition;\n\nexport const cable: MotifBySizeItem[] = [\n  {\n    sizes,\n    motif: getBasicCableMotif(4, 4, \"left\", 2),\n  },\n];\n\nexport const twistLace: MotifBySizeItem[] = [\n  {\n    sizes,\n    motif: {\n      chart: getChartFromText([\n        \"p k2tog yo p \",\n        \"p k:2 p\",\n        \"p yo ssk p\",\n        \"p k:2 p\",\n      ]),\n      stsCount: 4,\n    },\n  },\n];\n\n// Combined chart\n\nconst usedTechniques: {\n  title: string;\n  desc: string;\n  video: string | undefined;\n}[] = [\n  {\n    title: \"Cable CO\",\n    desc: \"Used for neckline CO\",\n    video: \"https://www.youtube.com/watch?v=4YUfdREnSQI\",\n  },\n  {\n    title: \"m1l & m1r\",\n    desc: \"Make 1 left/right, used for arm inset increase\",\n    video: m1l.videos?.[0].url,\n  },\n  {\n    title: \"w & t\",\n    desc: \"Wrap & turn; short row technique, my preference is German short row. \",\n    video: techniques[\"Wrap & Turn\"]?.videos?.[0].url,\n  },\n  {\n    title: \"Sewn on BO\",\n    desc: \"Or tubular BO\",\n    video: techniques[\"Tubular BO\"]?.videos[0].url,\n  },\n];\n\nconst stitchPage: PageInfo[] = [\n  {\n    id: \"cable\",\n    label: \"Cable\",\n    component: <StitchPattern motifBySize={cable} />,\n  },\n  {\n    id: \"lace\",\n    label: \"Lace\",\n    component: <StitchPattern motifBySize={twistLace} />,\n  },\n  {\n    id: \"techniques\",\n    label: \"Techniques\",\n    component: <Techniques list={usedTechniques} />,\n  },\n  {\n    id: \"abbr\",\n    label: \"Abbreviations\",\n    component: (\n      <Abbr\n        list={[\"CO\", \"BO\", \"cont\", \"inc\", \"dec\", \"rep\", \"RS\", \"SR\", \"WS\", \"pu\"]}\n      />\n    ),\n  },\n];\n\nexport default stitchPage;\n"],"names":["COInstruction","_ref","needle","method","direction","coCount","_jsx","SectionInstruction","intro","concat","rows","text","rowType","afterList","InteractiveAlert","_ref$isRow","isRow","_jsxs","Alert","width","children","AlertIcon","InteractivePattern","chart","instruction","_useState","useState","_useState2","_slicedToArray","menu","setMenu","_useState3","_useState4","focus","setFocus","Flex","gap","co","_objectSpread","beforeList","PlainTextList","list","DisplayOptions","options","_Fragment","Box","overflow","ChartComponent","isOnlyRowClickable","Written","display","StitchPattern","_motifBySize$selected","motifBySize","showReflected","selectedSize","setSelectedSize","_ref2","motif","stitches","getUniqueStsFromChart","Text","VStack","spacing","align","alignItems","flexWrap","length","SelectSize","sizes","map","m","join","onChange","id","MotifComponent","StitchList","hasWS","PageContentWrapper","mb","pt","Instruction","size","repeat","repeatedPattern","schema","schemaBySize","start","yokeSplit","total","vNeck","arm","every4RowAfterRaglan","hemDecStart","lastNeckInc","split","bo","body","sleeve","frontOneSide","underarm","cuffDecRow","cuffBO","fullBodyChart","getMotifFilledChart","combinedMotif","stsCount","rowCount","fullBodyBasePattern","getBasePatternFromChart","frontLeftBasePattern","getSlicedBasePattern","frontRightBasePattern","backBasePattern","fullSleeveChart","sleeveBasePattern","sleeveYokeBasePattern","yokeBasePatterns","getYokeBasePatternByParts","yorkPartBasePattern","getMergedBasePattern","frontLeftInc","backWithUnderArm","frontRightInc","bodyStartBasePattern","getBodyStartBasePattern","hemDec","getEven","boSts","sleeveFromUnderarmBasePattern","getSleeveBasePattern","startS","startB","back","startF","initPMs","overview","getChartFromBasePattern","showStsCountPerRow","stsMarkers","getNeedleText","needles","title","notes","startRowID","getRound","gutters","_","getChartFromText","halfGutters","motifColor","i","cableMotif","getMotifBySize","cable","cablePadding","flattedLaceChart","twistLace","row","getFlattenRow","laceMotif","lacePadding","chart1","getVerticalStackedChart","chart2","getMergedChart","getRightLeftFlippedChart","m1l","definition","getBasicCableMotif","usedTechniques","desc","video","_m1l$videos","videos","url","_techniques$WrapTu","techniques","_techniques$WrapTu$vi","_techniques$TubularB","stitchPage","label","component","Techniques","Abbr"],"sourceRoot":""}