{"version":3,"file":"static/js/122.05842513.chunk.js","mappings":"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","sources":["components/InteractiveAlert.tsx","components/StitchPattern.tsx","projects/juniper-vest/StitchesPage.tsx","projects/juniper-vest/profile.ts","projects/juniper-vest/sizes.ts","projects/juniper-vest/stitches.tsx","webpack://@tanyoknits/interactive-patterns/./src/components/StitchPattern.tsx?97ff"],"sourcesContent":["import { Alert, AlertIcon } from \"@chakra-ui/react\";\n\ninterface Props {\n  isRow?: boolean;\n}\n\nexport default function InteractiveAlert({ isRow = false }: Props) {\n  return (\n    <Alert width=\"fit-content\">\n      <AlertIcon />\n      Chart is interactive - click a {isRow ? \"row\" : \"stitch group\"} to see the\n      corresponding written instruction.\n    </Alert>\n  );\n}\n","import { Flex, Text, VStack } from \"@chakra-ui/react\";\nimport { MotifBySizeItem } from \"../utils/types\";\nimport { useState } from \"react\";\nimport {\n  Chart,\n  MotifComponent,\n  StitchList,\n  getRightLeftFlippedChart,\n  getUniqueStsFromChart,\n} from \"@tanyoknits/shared\";\nimport SelectSize from \"./SelectSize\";\nimport InteractiveAlert from \"./InteractiveAlert\";\nimport { css, cx } from \"@linaria/core\";\n\nconst styles = {\n  link: css`\n    font-weight: bold;\n    text-decoration: underline;\n    cursor: pointer;\n  `,\n};\n\ninterface Props {\n  intro?: string;\n  motifBySize: MotifBySizeItem[];\n  showReflected?: boolean;\n}\nexport default function StitchPattern({\n  intro,\n  motifBySize,\n  showReflected = false,\n}: Props) {\n  const [selectedSize, setSelectedSize] = useState<number>(0);\n  const { motif, direction } = motifBySize[selectedSize] ?? motifBySize[0];\n  const stitches = getUniqueStsFromChart(motif.chart);\n\n  return (\n    <Flex direction=\"column\" gap={6}>\n      {intro != null && <Text>{intro}</Text>}\n      <VStack spacing={6} align=\"left\">\n        <Flex gap={6} alignItems=\"center\" flexWrap=\"wrap\">\n          {motifBySize.length > 1 && (\n            <SelectSize\n              sizes={motifBySize.map((m) => m.sizes.join(\", \"))}\n              selectedSize={selectedSize}\n              onChange={(id: number) => setSelectedSize(id)}\n            />\n          )}\n          <InteractiveAlert />\n        </Flex>\n        <MotifComponent\n          {...motif}\n          direction={direction}\n          showReflected={showReflected}\n        />\n        <StitchList stitches={stitches} hasWS={true} />\n      </VStack>\n    </Flex>\n  );\n}\n","import { PatternWithMenusProps } from \"../../layout/PageWithMenus\";\nimport stitchPage from \"./stitches\";\n\nexport default function StitchPage({ menu }: PatternWithMenusProps) {\n  return <>{stitchPage[menu].component}</>;\n}\n","import { needles } from \"../../utils/needles\";\nimport { ProjectProfile } from \"../../utils/types\";\n\nconst profile: ProjectProfile = {\n  yarn: {\n    maker: \"Knit Picks\",\n    line: \"Wool of Andes Superwash\",\n    color: \"Haze Heather\",\n    url: \"https://www.knitpicks.com/haze-heather/p/26320\",\n    shape: \"skein\",\n    yards: 110,\n    grams: 50,\n  },\n  needles: [\n    { type: \"circular\", size: needles[10], usage: \"main body\" },\n    { type: \"circular\", size: needles[0], usage: \"rib\" },\n  ],\n  gauge: {\n    sts: \"St st\",\n    sts_count: 20,\n    row_count: 25,\n    needle: needles[10],\n  },\n  notions: [\"Stitch markers\", \"Tapestry needle\"],\n  difficulty: \"Intermediate\",\n  photoCount: 1,\n};\n\nexport default profile;\n","import { IntroSizing, PatternPartGroup } from \"../../utils/types\";\nimport {\n  Size,\n  baseBodySizing,\n  vestCoreParts,\n  FOMeasurement,\n  VestMeasurement,\n  CustomizedFO,\n} from \"../../utils/sizeBase\";\nimport profile from \"./profile\";\nimport { GaugeProps, getPattern, getTotalSts } from \"../../patternMakers/vest\";\nimport { getRound, Chart, getBasePatternFromChart } from \"@tanyoknits/shared\";\nimport { Needle } from \"../../utils/needles\";\nimport { getFOMeasurementBySize, getIntroSizingInfo } from \"../../utils/misc\";\n\n// Size list\nexport const sizes: Size[] = [\n  \"2XS\",\n  \"XS\",\n  \"S\",\n  \"M\",\n  \"L\",\n  \"XL\",\n  \"2XL\",\n  \"3XL\",\n  \"4XL\",\n];\n\nconst customizedSize: CustomizedFO = {\n  bust_circumference: [30, 32.5, 35, 39, 43, 47, 52, 56, 60],\n  total_length: [22, 23, 24, 25, 26, 27, null],\n  neck_depth: [3.75, 4, 4.25, 4.5, 4.75, null],\n  neck_band_height: [1.5, null, null, null, null, 2, null],\n  arm_band_height: [1.5, null, null, null, null, 2, null],\n  hem: [2.5, null],\n};\n\nexport const measurements: FOMeasurement[] = getFOMeasurementBySize(\n  sizes,\n  vestCoreParts,\n  customizedSize\n);\n\nexport function getGaugeItems(\n  sizeID: number,\n  halfBody: number,\n  stsGauge: number,\n  rowGauge: number\n): GaugeProps {\n  const ms = measurements[sizeID] as VestMeasurement;\n\n  // width\n  const neck = getRound(ms.neck_width * stsGauge);\n  const shoulder = getRound(ms.shoulder_width * stsGauge);\n\n  // Center pattern is an odd number, so neck width should be odd sts too.\n  const adjNeck = getRound(neck, 2) - 1;\n  const adjArmInset = (halfBody - adjNeck - shoulder * 2) / 2;\n  const side = Math.floor((halfBody - adjNeck) / 2);\n\n  // depth\n  const neckBack = getRound(ms.neck_back_depth * rowGauge, 2);\n  const neckFront = getRound(ms.neck_depth * rowGauge, 2);\n  const shoulderDrop = getRound(ms.shoulder_drop * rowGauge, 2);\n  const shoulderToArm = getRound(ms.armhole_depth * rowGauge, 2);\n  const armCurve = getRound(ms.underarm_curve_depth * rowGauge, 2);\n  const shoulderToArmInset = shoulderToArm - armCurve;\n\n  // band\n  const neckBand = getRound(ms.neck_band_height * rowGauge);\n  const armBand = getRound(ms.arm_band_height * rowGauge);\n  const hem = getRound(ms.hem * rowGauge);\n\n  const totalRowCount = getRound(ms.total_length * rowGauge);\n\n  const adjustedSize: GaugeProps = {\n    // Since motifs have their own St equiv stitch count, adjust half body sts\n    halfBody,\n    neck: adjNeck,\n    armInset: adjArmInset,\n    shoulder,\n    side,\n    neckBack,\n    neckFront,\n    shoulderDrop,\n    shoulderToArm,\n    armCurve,\n    shoulderToArmInset,\n    neckBand,\n    armBand,\n    hem,\n    totalRowCount,\n  };\n\n  return adjustedSize;\n}\n\nexport function getPatternByPartGroup(\n  backChart: Chart,\n  frontChart: Chart,\n  stsGauge: number,\n  rowGauge: number,\n  gaugeItems: GaugeProps,\n  coNeedle: Needle,\n  ribNeedle: Needle,\n  motifOffset: number = 0\n): PatternPartGroup[] {\n  // make a base pattern from motif repeats\n\n  const backBasePattern = getBasePatternFromChart(\n    backChart,\n    gaugeItems.totalRowCount,\n    motifOffset\n  );\n  const frontBasePattern = getBasePatternFromChart(\n    frontChart,\n    gaugeItems.totalRowCount,\n    motifOffset\n  );\n\n  const chartByPart = getPattern(\n    backBasePattern,\n    frontBasePattern,\n    stsGauge,\n    rowGauge,\n    gaugeItems,\n    coNeedle,\n    ribNeedle\n  );\n\n  // const frontChartByPart = getFrontPattern(frontBasePattern, gaugeItems, coNeedle);\n  return chartByPart;\n}\n\nconst totalStsBySize: number[] = measurements.map((m, i) => {\n  const schema = getTotalSts(\n    m as VestMeasurement,\n    profile.gauge.sts_count,\n    profile.gauge.row_count\n  );\n\n  return schema;\n});\n\nconst introInfo: IntroSizing = getIntroSizingInfo(\n  sizes,\n  baseBodySizing,\n  measurements,\n  totalStsBySize,\n  [\"bust\"],\n  [\"bust_circumference\", \"total_length\"],\n  { size: \"S\", grams: 260 }\n);\n\nexport default introInfo;\n","import {\n  Abbr,\n  Techniques,\n  definition,\n  getBasicCableMotif,\n  getLeafMotif,\n  techniques,\n} from \"@tanyoknits/shared\";\nimport { MotifBySizeItem, PageInfo } from \"../../utils/types\";\nimport { sizes } from \"./sizes\";\nimport StitchPattern from \"../../components/StitchPattern\";\n\n// Stitches in charts\nconst { m1l, c2l } = definition;\n\nexport const leaf: MotifBySizeItem[] = [\n  {\n    sizes,\n    motif: getLeafMotif(),\n  },\n];\n\nexport const twistL: MotifBySizeItem[] = [\n  {\n    sizes,\n    motif: getBasicCableMotif(2, 2, \"left\"),\n  },\n];\n\nexport const twistR: MotifBySizeItem[] = [\n  {\n    sizes,\n    motif: getBasicCableMotif(2, 2, \"right\"),\n  },\n];\n\nconst usedTechniques: {\n  title: string;\n  desc: string;\n  video: string | undefined;\n}[] = [\n  {\n    title: \"Cable CO\",\n    desc: \"Used for CO of each shoulder\",\n    video: \"https://www.youtube.com/watch?v=4YUfdREnSQI\",\n  },\n  {\n    title: \"Left or right twist\",\n    desc: \"Cable with only two stitches, this twist can be done without cable needle\",\n    video: c2l.videos?.[0].url,\n  },\n  {\n    title: \"Knit On CO (koco)\",\n    desc: \"Used to create new sts along underarm\",\n    video: undefined,\n  },\n  {\n    title: \"m1l & m1r\",\n    desc: \"Make 1 left/right, used for arm inset increase\",\n    video: m1l.videos?.[0].url,\n  },\n  {\n    title: \"w & t\",\n    desc: \"Wrap & turn; short row technique, my preference is German short row. \",\n    video: techniques[\"Wrap & Turn\"]?.videos?.[0].url,\n  },\n  {\n    title: \"Sewn on BO\",\n    desc: \"Or tubular BO\",\n    video: techniques[\"Tubular BO\"]?.videos[0].url,\n  },\n];\n\nconst stitchPage: PageInfo[] = [\n  {\n    id: \"leaf-chart\",\n    label: \"Leaf\",\n    component: <StitchPattern motifBySize={leaf} />,\n  },\n  {\n    id: \"left-twist-chart\",\n    label: \"Left Twist\",\n    component: <StitchPattern motifBySize={twistL} />,\n  },\n  {\n    id: \"right-twist-chart\",\n    label: \"Right Twist\",\n    component: <StitchPattern motifBySize={twistR} />,\n  },\n  {\n    id: \"techniques\",\n    label: \"Techniques\",\n    component: <Techniques list={usedTechniques} />,\n  },\n  {\n    id: \"abbr\",\n    label: \"Abbreviations\",\n    component: (\n      <Abbr\n        list={[\"CO\", \"BO\", \"cont\", \"inc\", \"dec\", \"rep\", \"RS\", \"SR\", \"WS\", \"pu\"]}\n      />\n    ),\n  },\n];\n\nexport default stitchPage;\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["InteractiveAlert","_ref","_ref$isRow","isRow","_jsxs","Alert","width","children","_jsx","AlertIcon","StitchPattern","_motifBySize$selected","intro","motifBySize","_ref$showReflected","showReflected","_useState","useState","_useState2","_slicedToArray","selectedSize","setSelectedSize","_ref2","motif","direction","stitches","getUniqueStsFromChart","chart","Flex","gap","Text","VStack","spacing","align","alignItems","flexWrap","length","SelectSize","sizes","map","m","join","onChange","id","MotifComponent","_objectSpread","StitchList","hasWS","StitchPage","menu","_Fragment","stitchPage","component","profile","yarn","maker","line","color","url","shape","yards","grams","needles","type","size","usage","gauge","sts","sts_count","row_count","needle","notions","difficulty","photoCount","measurements","getFOMeasurementBySize","vestCoreParts","bust_circumference","total_length","neck_depth","neck_band_height","arm_band_height","hem","getGaugeItems","sizeID","halfBody","stsGauge","rowGauge","ms","neck","getRound","neck_width","shoulder","shoulder_width","adjNeck","adjArmInset","side","Math","floor","neckBack","neck_back_depth","neckFront","shoulderDrop","shoulder_drop","shoulderToArm","armhole_depth","armCurve","underarm_curve_depth","armInset","shoulderToArmInset","neckBand","armBand","totalRowCount","getPatternByPartGroup","backChart","frontChart","gaugeItems","coNeedle","ribNeedle","motifOffset","arguments","undefined","backBasePattern","getBasePatternFromChart","frontBasePattern","getPattern","totalStsBySize","i","getTotalSts","introInfo","getIntroSizingInfo","baseBodySizing","m1l","definition","c2l","leaf","getLeafMotif","twistL","getBasicCableMotif","twistR","usedTechniques","title","desc","video","_c2l$videos","videos","_m1l$videos","_techniques$WrapTu","techniques","_techniques$WrapTu$vi","_techniques$TubularB","label","Techniques","list","Abbr"],"sourceRoot":""}