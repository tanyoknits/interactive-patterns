{"version":3,"file":"static/js/433.b3915c17.chunk.js","mappings":"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","sources":["projects/juniper-vest/profile.ts","projects/juniper-vest/sizes.ts"],"sourcesContent":["import { needles } from \"../../utils/needles\";\nimport { ProjectProfile } from \"../../utils/types\";\n\nconst profile: ProjectProfile = {\n  yarn: {\n    maker: \"Knit Picks\",\n    line: \"Wool of Andes Superwash\",\n    color: \"Haze Heather\",\n    url: \"https://www.knitpicks.com/haze-heather/p/26320\",\n    shape: \"skein\",\n    yards: 110,\n    grams: 50,\n  },\n  needles: [\n    { type: \"circular\", size: needles[10], usage: \"main body\" },\n    { type: \"circular\", size: needles[0], usage: \"rib\" },\n  ],\n  gauge: {\n    sts: \"St st\",\n    sts_count: 20,\n    row_count: 25,\n    needle: needles[10],\n  },\n  notions: [\"Stitch markers\", \"Tapestry needle\"],\n  difficulty: \"Intermediate\",\n  photoCount: 1,\n};\n\nexport default profile;\n","import { IntroSizing, PatternPartGroup } from \"../../utils/types\";\nimport {\n  Size,\n  baseBodySizing,\n  vestCoreParts,\n  FOMeasurement,\n  VestMeasurement,\n  CustomizedFO,\n} from \"../../utils/sizeBase\";\nimport profile from \"./profile\";\nimport { GaugeProps, getPattern, getTotalSts } from \"../../patternMakers/vest\";\nimport { getRound, Chart, getBasePatternFromChart } from \"@tanyoknits/shared\";\nimport { Needle } from \"../../utils/needles\";\nimport { getFOMeasurementBySize, getIntroSizingInfo } from \"../../utils/misc\";\n\n// Size list\nexport const sizes: Size[] = [\n  \"2XS\",\n  \"XS\",\n  \"S\",\n  \"M\",\n  \"L\",\n  \"XL\",\n  \"2XL\",\n  \"3XL\",\n  \"4XL\",\n];\n\nconst customizedSize: CustomizedFO = {\n  bust_circumference: [30, 32.5, 35, 39, 43, 47, 52, 56, 60],\n  total_length: [22, 23, 24, 25, 26, 27, null],\n  neck_depth: [3.75, 4, 4.25, 4.5, 4.75, null],\n  neck_band_height: [1.5, null, null, null, null, 2, null],\n  arm_band_height: [1.5, null, null, null, null, 2, null],\n  hem: [2.5, null],\n};\n\nexport const measurements: FOMeasurement[] = getFOMeasurementBySize(\n  sizes,\n  vestCoreParts,\n  customizedSize\n);\n\nexport function getGaugeItems(\n  sizeID: number,\n  halfBody: number,\n  stsGauge: number,\n  rowGauge: number\n): GaugeProps {\n  const ms = measurements[sizeID] as VestMeasurement;\n\n  // width\n  const neck = getRound(ms.neck_width * stsGauge);\n  const shoulder = getRound(ms.shoulder_width * stsGauge);\n\n  // Center pattern is an odd number, so neck width should be odd sts too.\n  const adjNeck = getRound(neck, 2) - 1;\n  const adjArmInset = (halfBody - adjNeck - shoulder * 2) / 2;\n  const side = Math.floor((halfBody - adjNeck) / 2);\n\n  // depth\n  const neckBack = getRound(ms.neck_back_depth * rowGauge, 2);\n  const neckFront = getRound(ms.neck_depth * rowGauge, 2);\n  const shoulderDrop = getRound(ms.shoulder_drop * rowGauge, 2);\n  const shoulderToArm = getRound(ms.armhole_depth * rowGauge, 2);\n  const armCurve = getRound(ms.underarm_curve_depth * rowGauge, 2);\n  const shoulderToArmInset = shoulderToArm - armCurve;\n\n  // band\n  const neckBand = getRound(ms.neck_band_height * rowGauge);\n  const armBand = getRound(ms.arm_band_height * rowGauge);\n  const hem = getRound(ms.hem * rowGauge);\n\n  const totalRowCount = getRound(ms.total_length * rowGauge);\n\n  const adjustedSize: GaugeProps = {\n    // Since motifs have their own St equiv stitch count, adjust half body sts\n    halfBody,\n    neck: adjNeck,\n    armInset: adjArmInset,\n    shoulder,\n    side,\n    neckBack,\n    neckFront,\n    shoulderDrop,\n    shoulderToArm,\n    armCurve,\n    shoulderToArmInset,\n    neckBand,\n    armBand,\n    hem,\n    totalRowCount,\n  };\n\n  return adjustedSize;\n}\n\nexport function getPatternByPartGroup(\n  backChart: Chart,\n  frontChart: Chart,\n  stsGauge: number,\n  rowGauge: number,\n  gaugeItems: GaugeProps,\n  coNeedle: Needle,\n  ribNeedle: Needle,\n  motifOffset: number = 0\n): PatternPartGroup[] {\n  // make a base pattern from motif repeats\n\n  const backBasePattern = getBasePatternFromChart(\n    backChart,\n    gaugeItems.totalRowCount,\n    motifOffset\n  );\n  const frontBasePattern = getBasePatternFromChart(\n    frontChart,\n    gaugeItems.totalRowCount,\n    motifOffset\n  );\n\n  const chartByPart = getPattern(\n    backBasePattern,\n    frontBasePattern,\n    stsGauge,\n    rowGauge,\n    gaugeItems,\n    coNeedle,\n    ribNeedle\n  );\n\n  // const frontChartByPart = getFrontPattern(frontBasePattern, gaugeItems, coNeedle);\n  return chartByPart;\n}\n\nconst totalStsBySize: number[] = measurements.map((m, i) => {\n  const schema = getTotalSts(\n    m as VestMeasurement,\n    profile.gauge.sts_count,\n    profile.gauge.row_count\n  );\n\n  return schema;\n});\n\nconst introInfo: IntroSizing = getIntroSizingInfo(\n  sizes,\n  baseBodySizing,\n  measurements,\n  totalStsBySize,\n  [\"bust\"],\n  [\"bust_circumference\", \"total_length\"],\n  { size: \"S\", grams: 260 }\n);\n\nexport default introInfo;\n"],"names":["profile","yarn","maker","line","color","url","shape","yards","grams","needles","type","size","usage","gauge","sts","sts_count","row_count","needle","notions","difficulty","photoCount","sizes","measurements","getFOMeasurementBySize","vestCoreParts","bust_circumference","total_length","neck_depth","neck_band_height","arm_band_height","hem","getGaugeItems","sizeID","halfBody","stsGauge","rowGauge","ms","neck","getRound","neck_width","shoulder","shoulder_width","adjNeck","adjArmInset","side","Math","floor","neckBack","neck_back_depth","neckFront","shoulderDrop","shoulder_drop","shoulderToArm","armhole_depth","armCurve","underarm_curve_depth","armInset","shoulderToArmInset","neckBand","armBand","totalRowCount","getPatternByPartGroup","backChart","frontChart","gaugeItems","coNeedle","ribNeedle","motifOffset","arguments","length","undefined","backBasePattern","getBasePatternFromChart","frontBasePattern","getPattern","totalStsBySize","map","m","i","getTotalSts","introInfo","getIntroSizingInfo","baseBodySizing"],"sourceRoot":""}